<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="       
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd       
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd       
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd       
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd       
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- 注解配置 -->
    <context:component-scan base-package="com.lingnet"></context:component-scan>
    <!-- 加载JDBC的配置信息 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath*:jdbc.properties</value>
        </property>
    </bean>
   <!--  <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter"> 
	    <property name="slowSqlMillis" value="5000" /> 
	    <property name="logSlowSql" value="true" /> 
	    <property name="mergeSql" value="true" /> 
    </bean> -->
     <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="100" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="6000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="30000" />

        <!-- <property name="validationQuery" value="SELECT 'x'" /> -->
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超时时间；单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="3600" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

       <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" />
       <!--  <property name="filters" value="config" /> -->
        <!--<property name="connectionProperties" value="config.decrypt=true" />-->
        <!--慢查询sql监控-->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=500;druid.stat.logSlowSql=true"/>
    </bean>
    <!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.lingnet.*.service.*</value>
            </list>
        </property>
    </bean>
     <!--事务管理 通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="insertBussinessLog" propagation="REQUIRES_NEW" rollback-for="java.lang.Throwable"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!-- 事务 aop 配置 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.lingnet.*.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean> 
    
    
    <bean id="backendResourceService" class="com.lingnet.qxgl.service.impl.BackendResourceServiceImpl" >
        <property name="jdbcUrl" value="${jdbc.url}"/> 
    </bean>
    
    <bean id="adminService" class="com.lingnet.qxgl.service.impl.AdminServiceImpl" >
        <property name="jdbcUrl" value="${jdbc.url}"/> 
    </bean>
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 配置Hibernaye拦截器，自动填充时间日期 -->
        <property name="entityInterceptor" ref="entityInterceptor" />
        <property name="hibernateProperties">
            <props>
                <!-- MySql时数据库方言使用MySQLInnoDBDialect -->
                <!-- <prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>-->
                <!-- ORACLE时数据库方言使用Oracle10gDialect -->
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop> 
                <!-- 每次从数据库中取出的记录条数 -->
                <prop key="hibernate.jdbc.fetch_size">20</prop>
                <!-- 每次从数据库中批量操作的记录条数 -->
                <prop key="hibernate.jdbc.batch_size">20</prop>
                <!-- 打印SQL语句 -->
                <prop key="hibernate.show_sql">true</prop>
                <!-- 格式化SQL语句 -->
                <prop key="hibernate.format_sql">true</prop>
                <!-- 自动建表 -->
                <!--prop key="hibernate.hbm2ddl.auto">update</prop-->
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
                <prop key="current_session_context_class">thread</prop>
            </props>
        </property>
        <property name="namingStrategy" ref="databaseNamingStrategy"></property>
        <property name="packagesToScan" value="com.lingnet.*"></property>
    </bean>
    <!-- 动态表名映射 -->
    <bean id="databaseNamingStrategy" class="com.lingnet.common.DatabaseNamingStrategy">
        <property name="tablePrefix" value="${namingStrategy.tablePrefix}" />
        <property name="isAddUnderscores" value="${namingStrategy.isAddUnderscores}" />
        <property name="maxLength" value="${namingStrategy.maxLength}" />
    </bean>

    <!-- 配置JdbcTemplate类 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置事物管理 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <!-- 事务管理交由Spring管理 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- Spring工具类 -->
    <bean id="springUtil" class="com.lingnet.util.SpringUtil" />
    <!-- JSON处理类 -->
    <bean id="jacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
    <!-- 验证图片 -->
    <bean id="captchaService"
        class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
        <property name="captchaEngine">
            <bean class="com.lingnet.util.CaptchaEngine" />
        </property>
        <property name="minGuarantedStorageDelayInSeconds" value="600" />
    </bean>
    <!-- 定时任务 -->
    <bean id="myJob" class="org.springframework.scheduling.quartz.JobDetailBean">    
        <property name="jobClass" value="com.lingnet.hcm.action.check.MyJob"/>    
    </bean>  
    
    <bean id="complexTellTheTimeTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">    
      <property name="jobDetail">    
          <ref bean="myJob"/>    
      </property>    
      <property name="cronExpression">    
      <!--  这里是重点，可以自定义表达式实现定时触发。 
        1．秒（0–59）
        2．分钟（0–59）
        3．小时（0–23）
        4．月份中的日期（1–31）
        5．月份（1–12或JAN–DEC）
        6．星期中的日期（1–7或SUN–SAT）
        7．年份（1970–2099）
    “月份中的日期”和“星期中的日期”这两个元素是互斥的，
    因此应该通过设置一个问号（？）来表明你不想设置的那个字段     -->
           <value>0 0 2 * * ? </value>    
      </property>    
  </bean>
  
  <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">    
      <property name="triggers">    
          <list>    
              <ref bean="complexTellTheTimeTrigger"/>    
              <!--  ....下面可以继续添加其他触发器     -->
          </list>    
      </property>    
  </bean> 
  <!-- <bean id="openSessionInViewInterceptor"  
    class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">  
    <property name="sessionFactory" ref="sessionFactory" />  
</bean> --> 
<!--        <bean id="WupinInputAction" class="com.lingnet.hcm.action.laobao.WupinInputAction">
       <property name="WupinInputAction" ref="WupinInputAction"/>
       </bean>
          <bean id="WupininputDao" class="com.lingnet.hcm.dao.impl.laobao.WupininputDaoImpl">
           </bean>
              <bean id="WupinInputService" class="com.lingnet.hcm.service.impl.laobao.WupinInputServiceImpl">
               <property name="services" ref="WupinInputService"/>
     </bean> -->
</beans>