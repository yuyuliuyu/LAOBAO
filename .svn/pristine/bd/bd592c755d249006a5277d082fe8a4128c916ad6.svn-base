package com.lingnet.hcm.service.impl.salary;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lingnet.common.service.impl.BaseServiceImpl;
import com.lingnet.hcm.dao.salary.SalaryAgainDao;
import com.lingnet.hcm.entity.salary.SalaryAgain;
import com.lingnet.hcm.entity.salary.SalaryAgainItems;
import com.lingnet.hcm.service.salary.SalaryAgainItemsService;
import com.lingnet.hcm.service.salary.SalaryAgainService;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;

/**
 * 二次分配总量主表
 * @ClassName: SalaryAgainServiceImpl 
 * @Description: TODO 
 * @author zhanghj
 * @date 2017年5月17日 上午8:13:58 
 *
 */
@Service("salaryAgainService")
public class SalaryAgainServiceImpl extends BaseServiceImpl<SalaryAgain, String>
              implements SalaryAgainService {

    @Resource(name="salaryAgainItemsService")
    private SalaryAgainItemsService salaryAgainItemsService;
    @Resource(name="salaryAgainDao")
    private SalaryAgainDao salaryAgainDao;

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String saveOrUpdate(String companyId, String period, String griddata, String columns, String salaryNames) throws Exception {
        List<Map<String, String>> list = JsonUtil.getMapList(griddata);
        String assignId = "";
        if (list.size() > 0) {
            SalaryAgain salaryAgain = get(SalaryAgain.class,
                    Restrictions.eq("companyId", companyId), Restrictions.eq("fpDate", period), Restrictions.eq("isDelete", 0));
            if (salaryAgain != null) {
                // 已经提交、通过的不能再上报
                if (salaryAgain.getIsSp() == 1 || salaryAgain.getIsSp() == 3) {
                    return "该总量已经上报，不能再保存";
                }
                assignId = salaryAgain.getId();
            } else {
                // 增加
                SalaryAgain sAgain = new SalaryAgain();
                sAgain.setCompanyId(companyId);
                sAgain.setFpDate(period);
                sAgain.setRewardTotal("0");
                sAgain.setReportStatus(0);
                sAgain.setIsSp(0);
                sAgain.setIsDelete(0);
                assignId = save(sAgain);
                if (StringUtils.isBlank(assignId)) {
                    return "保存失败";
                }
            }
        }

        String[] salaryId = columns.split(",");
        String[] salaryNamesArray = salaryNames.split(",");
        for (int i = 0, l = list.size(); i < l; i++) {
            Map<String, String> map = list.get(i);
            if ("modified".equals(map.get("_state"))) {
                String[] idsArray = map.get("id").split(",");
                for (int j = 0, m = salaryId.length; j < m; j++) {
                    SalaryAgainItems againItems = get(SalaryAgainItems.class,
                            Restrictions.eq("id", idsArray[j]), Restrictions.eq("salaryItemsId", salaryId[j]));
                    if (againItems != null) {
                        if (againItems.getIsDelete() == 1) {
                            throw new Exception(map.get("name") + "的" + salaryNamesArray[j] + "不存在，已经被删除");
                        } else {
                            againItems.setNeedAmount(map.get(salaryId[j] + "actual"));
                            salaryAgainItemsService.update(againItems);
                        }
                    }
                }
            } else if ("added".equals(map.get("_state"))) {
                String staffId  = map.get("staffId");
                for (int j = 0, m = salaryId.length; j < m; j++) {
                    SalaryAgainItems againItems = new SalaryAgainItems();
                    againItems.setStaffId(staffId);
                    againItems.setSalaryItemsId(salaryId[j]);
                    againItems.setSalaryItemsName(salaryNamesArray[j]);
                    againItems.setSalaryAgainId(assignId);
                    againItems.setNeedAmount(map.get(salaryId[j] + "actual"));
                    againItems.setIsDelete(0);
                    String id = salaryAgainItemsService.save(againItems);
                    if (StringUtils.isBlank(id)) {
                        throw new Exception(map.get("name") + "的" + salaryNamesArray[j] + "保存失败");
                    }
                }
            }
        }

        return "success";
    }

    @Override
    public Map<String, Object> getPeriodAmountListData(String searchData, String companyId, Pager pager) {
        return salaryAgainDao.getPeriodAmountListData(searchData, companyId, pager);
    }

    @Override
    public Map<String, Object> getAllSecondAmountListData(String period, String companyId, Pager pager) {
        return salaryAgainDao.getAllSecondAmountListData(period, companyId, pager);
    }

    @Override
    public List<Map<String, Object>> getAllStaffSalaryGroup(String companyId) {
        return salaryAgainDao.getAllStaffSalaryGroup(companyId);
    }

    @Override
    public String updateSetReportStatus(String companyId, String period, String id) {
        if(StringUtils.isBlank(id)) {
            return "请先保存总量数据";
        }

        // 查找总量表是否存在
        SalaryAgain again = get(SalaryAgain.class, Restrictions.eq("id", id),
                Restrictions.eq("fpDate", period));
        if (again == null) {
            return "请先保存总量数据";
        } else {
            if (again.getIsDelete() == 1) {
                return "发生异常";
            }

            // 已经提交、通过的不能再上报
            if (again.getIsSp() == 1 || again.getIsSp() == 3) {
                return "该总量已经上报";
            }
        }
        again.setReportStatus(1);
        again.setIsSp(1);

        // 计算该公司总量合计
        List<SalaryAgainItems> againItems = getList(SalaryAgainItems.class,
                Restrictions.eq("salaryAgainId", again.getId()), Restrictions.eq("isDelete", 0));
        Double allAmout = 0d;
        for (int i = 0, m = againItems.size(); i < m; i++) {
            allAmout += Double.valueOf(againItems.get(i).getNeedAmount());
        }

        again.setRewardTotal(String.valueOf(allAmout));
        update(again);

        return "success";
    }
}
