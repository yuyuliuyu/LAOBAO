package com.lingnet.hcm.dao.impl.salary;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import com.lingnet.common.dao.impl.BaseDaoImplInit;
import com.lingnet.hcm.dao.salary.SalaryAssignationDao;
import com.lingnet.hcm.entity.salary.SalaryAssignation;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;

/**
 * 薪酬分配过程
 * @ClassName: SalaryAssignationDaoImpl 
 * @Description: 薪酬分配过程 
 * @author zhanghj
 * @date 2017年5月10日 上午9:58:58 
 *
 */
@Repository("salaryAssignationDao")
public class SalaryAssignationDaoImpl extends BaseDaoImplInit<SalaryAssignation, String> implements SalaryAssignationDao {

    @Override
    public Map<String, Object> getSalaryAssignationListData(String companyId, String searchData, Pager pager) {
        StringBuilder sql = new StringBuilder();
        sql.append("   SELECT                                                                        ");
        sql.append("   SA.ID, SA.NAME,SG.NAME GROUPNAME,SGW.NAME WAGENAME,PERIODDATA.NAME PAYPERIOD  ");
        sql.append("   FROM XC_SALARY_ASSIGNATION SA                                                 ");
        sql.append("   LEFT JOIN XC_SALARY_GROUP SG                                                  ");
        sql.append("   ON SA.SALARY_GROUP_ID = SG.ID                                                 ");
        sql.append("   LEFT JOIN XC_SALARY_GROUP_WAGE SGW                                            ");
        sql.append("   ON SA.SALARY_WAGE_ID = SGW.ID                                                 ");
        sql.append("   AND SGW.IS_DELETE = 0                                                         ");
        sql.append("   LEFT JOIN XC_PERIODDATA PERIODDATA                                            ");
        sql.append("   ON SA.SALARY_PERIOD = PERIODDATA.ID                                           ");
        sql.append("   WHERE SA.IS_DELETE = 0                                           ");

        // 公司ID
        sql.append("   AND SA.COMPANY_ID = '"+companyId+"'                                      ");

        Map<String, String> mapData = JsonUtil.parseProperties(searchData);
        if (mapData != null) {
            // 工资套名称
            if (!StringUtils.isBlank(mapData.get("name"))) {
                sql.append("   AND SGW.NAME LIKE '%"+mapData.get("name").trim()+"%'                                        ");
            }
        }
        sql.append("   ORDER BY SA.CREATEDATE DESC                                                   ");

        pager  = findPagerBySql(pager, sql.toString());
        List<?> list = pager.getResult();
        List<HashMap<String, Object>> dataList = new ArrayList<HashMap<String, Object>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", obj[0]);
            map.put("name", obj[1]);
            map.put("groupName", obj[2]);
            map.put("wageName", obj[3]);
            map.put("payPeriod", obj[4]);
            dataList.add(map);
        }
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());

        return map;
    }

    @Override
    public List<Map<String, Object>> getNeedAssignationData(String groupId, String wageId) {
        StringBuilder sql = new StringBuilder();
        sql.append("  SELECT JBI.ID,                                                 ");
        sql.append("  MIN(JBI.JOB_NUMBER) JOBNUMBER,                                 ");
        sql.append("  MIN(JBI.NAME) NAME,                                            ");
        sql.append("  WM_CONCAT(SI.ID) ITEMSID,                                      ");
        sql.append("  WM_CONCAT(SI.NAME) ITEMSNAME,                                  ");
        sql.append("  WM_CONCAT(NVL(SF.ID, ' ')) FORMULAID,                          ");
        sql.append("  WM_CONCAT(NVL(SF.CNT_MATH, 0)) FORMULA                         ");
        sql.append("  FROM XC_SALARY_GROUP_WAGE SGW                                  ");
        sql.append("  LEFT JOIN XC_GROUP_WAGE_AND_TYPE GWAY                          ");
        sql.append("  ON SGW.ID = GWAY.WAGE_ID                                       ");
        sql.append("  AND GWAY.IS_DELETE = 0                                         ");
        sql.append("  LEFT JOIN XC_SALARY_PERSONAL SP                                ");
        sql.append("  ON SGW.SALARY_GROUP_ID = SP.SALARY_GROUP_ID                    ");
        sql.append("  AND SP.IS_DELETE = 0                                           ");
        sql.append("  LEFT JOIN JC_BASIC_INFORMATION JBI                             ");
        sql.append("  ON SP.SALARY_RECORD_ID = JBI.ID                                ");
        sql.append("  LEFT JOIN XC_SALARY_ITEMS SI                                   ");
        sql.append("  ON GWAY.ITEM_ID = SI.ID                                        ");
        sql.append("  LEFT JOIN XC_SALARY_FORMULA SF                                 ");
        sql.append("  ON GWAY.ID = SF.BIND_ID                                        ");
        sql.append("  AND SF.IS_DELETE = 0                                        ");
        sql.append("  AND SF.IS_DEFAULT = 1                                        ");
        sql.append("  WHERE SGW.SALARY_GROUP_ID = '"+groupId+"' ");
        sql.append("  AND SGW.ID = '"+wageId+"'                ");
        sql.append("  AND JBI.ON_JOB IN (0,1,2)                                      ");// 实习期、试岗期、正式工
        sql.append("  GROUP BY JBI.ID, JBI.CREATEDATE                                ");
        sql.append("  ORDER BY JBI.CREATEDATE DESC                                   ");

        List<?> list = findBySql(sql.toString());
        List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", obj[0]);
            map.put("jobNumber", obj[1]);
            map.put("name", obj[2]);
            map.put("itemsId", obj[3]);
            map.put("itemsName", obj[4]);
            map.put("formulaId", obj[5]);
            map.put("formula", obj[6]);
            dataList.add(map);
        }

        return dataList;
    }

    @Override
    public List<Map<String, Object>> getAssignationForStaffData(String id, String ids, String searchData) {
        StringBuilder sql = new StringBuilder();
        sql.append("  SELECT                                                                                                 ");
        sql.append("  ASTAFF.ID, MIN(ASTAFF.STAFF_ID) STAFFID, MIN(ASTAFF.JOB_NUMBER) JOBNUMBER, MIN(ASTAFF.STAFF_NAME) NAME,");
        sql.append("  WM_CONCAT(ASS.IBF_ID) ITEMSID,                                                                         ");
        sql.append("  WM_CONCAT(ASS.IBF_NAME) ITEMSNAME,                                                                     ");
        sql.append("  WM_CONCAT(ASS.ASSIGNATION_CHARGE) CHARGE,                                                               ");
        sql.append("  WM_CONCAT(ASS.ID) ASSID                                                               ");
        sql.append("  FROM XC_ASSIGNATION_STAFF ASTAFF                                                                       ");
        sql.append("  LEFT JOIN XC_ASSIGNATION_STAFF_SALARY ASS                                                              ");
        sql.append("  ON ASTAFF.ID = ASS.ASSIGNATION_STAFF_ID                                                                ");
        sql.append("  AND ASS.IS_DELETE = 0                                                                                  ");
        sql.append("  WHERE ASTAFF.SALARY_ASSIGNATION_ID = '"+id+"'                                                          ");
        sql.append("  AND ASTAFF.IS_DELETE = 0                                                                               ");

        Map<String, String> mapData = JsonUtil.parseProperties(searchData);
        if (mapData != null) {
            // 职工号
            if (!StringUtils.isBlank(mapData.get("jobNumber"))) {
                sql.append("  AND ASTAFF.JOB_NUMBER LIKE '%"+mapData.get("jobNumber").trim()+"%'                                 ");
            }
            // 职工名称
            if (!StringUtils.isBlank(mapData.get("name"))) {
                sql.append("  AND ASTAFF.STAFF_NAME LIKE '%"+mapData.get("name").trim()+"%'                                 ");
            }
        }

        // 核算数据id
        if (!StringUtils.isBlank(ids)) {
            sql.append("  AND ASTAFF.ID IN ('"+StringUtils.join(ids.split(","), "','")+"') ");
        }
        sql.append("  GROUP BY ASTAFF.ID, ASTAFF.CREATEDATE                                                                  ");
        sql.append("  ORDER BY ASTAFF.CREATEDATE DESC                                                                        ");

        List<?> list = findBySql(sql.toString());
        List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", obj[0]);
            map.put("staffId", obj[1]);
            map.put("jobNumber", obj[2]);
            map.put("name", obj[3]);
            map.put("itemsId", obj[4]);
            map.put("itemsName", obj[5]);
            map.put("charge", obj[6]);
            map.put("assId", obj[7]);
            dataList.add(map);
        }

        return dataList;
    }

    @Override
    public List<Map<String, Object>> getSelectedStaffAssignData(String assignStaffId, String assignId, String id) {
        StringBuilder sql = new StringBuilder();
        sql.append("   SELECT                                                    ");
        sql.append("   WM_CONCAT(ASS.ID) ID,                                     ");
        sql.append("   WM_CONCAT(ASS.IBF_ID) ITEMSID,                            ");
        sql.append("   WM_CONCAT(TO_CHAR(NVL(SF.CNT_MATH, 'result=0'))) FORMULA  ");
        sql.append("   FROM XC_ASSIGNATION_STAFF ASTAFF                          ");
        sql.append("   LEFT JOIN XC_ASSIGNATION_STAFF_SALARY ASS                 ");
        sql.append("   ON ASTAFF.ID = ASS.ASSIGNATION_STAFF_ID                   ");
        sql.append("   AND ASS.IS_DELETE = 0                                     ");
        sql.append("   LEFT JOIN XC_SALARY_ASSIGNATION SA                        ");
        sql.append("   ON SA.ID = ASTAFF.SALARY_ASSIGNATION_ID                   ");
        sql.append("   LEFT JOIN XC_SALARY_GROUP_WAGE SGW                        ");
        sql.append("   ON SA.SALARY_WAGE_ID = SGW.ID                             ");
        sql.append("   AND SGW.IS_DELETE = 0                                     ");
        sql.append("   LEFT JOIN XC_GROUP_WAGE_AND_TYPE GWAY                     ");
        sql.append("   ON SGW.ID = GWAY.WAGE_ID                                  ");
        sql.append("   AND GWAY.IS_DELETE = 0                                    ");
        sql.append("   AND GWAY.ITEM_ID = ASS.IBF_ID                             ");
        sql.append("   LEFT JOIN XC_SALARY_FORMULA SF                            ");
        sql.append("   ON GWAY.ID = SF.BIND_ID                                   ");
        sql.append("   AND SF.IS_DELETE = 0                                      ");
        sql.append("   AND SF.IS_DEFAULT = 1                                     ");
        sql.append("   WHERE ASTAFF.IS_DELETE = 0                                  ");

        // 如果薪酬分配过程ID存在说明全表操作
        if (!StringUtils.isBlank(assignStaffId)) {
            sql.append("   AND SA.ID = '" + assignStaffId + "'");
        } else {
            sql.append("   AND ASS.ID IN ('"+StringUtils.join(assignId.split(","), "','")+"') ");

            // 如果薪资项目不存在说明全部的薪资项目参与计算
            if (!StringUtils.isBlank(id)) {
                sql.append("   AND ASS.IBF_ID = '" + id + "'");
            }
        }
        sql.append("   GROUP BY ASTAFF.ID                        ");

        List<?> list = findBySql(sql.toString());
        List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", obj[0]);
            map.put("itemsId", obj[1]);
            map.put("formula", obj[2]);
            dataList.add(map);
        }

        return dataList;
    }

    @Override
    public List<Map<String, String>> getAllGroupWageFinancialList(String assignStaffId, String itemid) {
        StringBuilder sql = new StringBuilder();
        sql.append("   SELECT DISTINCT                                    ");
        sql.append("   SF.ID, TO_CHAR(SF.CONTENT) CONTENT, TO_CHAR(SF.CNT_MATH) CNTMATH           ");
        sql.append("   FROM XC_SALARY_FORMULA SF                          ");
        sql.append("   LEFT JOIN XC_GROUP_WAGE_AND_TYPE GWAY              ");
        sql.append("   ON GWAY.ID = SF.BIND_ID                            ");
        sql.append("   AND GWAY.IS_DELETE = 0                             ");
        sql.append("   LEFT JOIN XC_SALARY_GROUP_WAGE SGW                 ");
        sql.append("   ON SGW.ID = GWAY.WAGE_ID                           ");
        sql.append("   LEFT JOIN XC_ASSIGNATION_STAFF_SALARY ASS          ");
        sql.append("   ON GWAY.ITEM_ID = ASS.IBF_ID                       ");
        sql.append("   LEFT JOIN XC_ASSIGNATION_STAFF ASTAFF              ");
        sql.append("   ON ASTAFF.ID = ASS.ASSIGNATION_STAFF_ID            ");
        sql.append("   AND ASTAFF.IS_DELETE = 0                           ");
        sql.append("   LEFT JOIN XC_SALARY_ASSIGNATION SA                 ");
        sql.append("   ON SA.ID = ASTAFF.SALARY_ASSIGNATION_ID            ");
        sql.append("   WHERE SF.IS_DELETE = 0                             ");
        sql.append("   AND SA.ID = '"+assignStaffId+"'     ");
        sql.append("   AND ASS.IBF_ID = '"+itemid+"'");

        List<?> list = findBySql(sql.toString());
        List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, String> map = new HashMap<String, String>();
            map.put("id", obj[0]+"");
            try {
                map.put("cntMath", obj[2].toString());
                map.put("content", obj[1].toString());
            } catch (Exception e) {
                map.put("cntMath", "");
                map.put("content", "");
            }
            map.put("type", "1");
            dataList.add(map);
        }
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("id", "0");
        map.put("content", "简单计算公式");
        map.put("type", "2");
        dataList.add(map);

        return dataList;
    }

}
