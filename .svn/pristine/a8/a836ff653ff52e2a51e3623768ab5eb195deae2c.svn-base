package com.lingnet.hcm.action.personnel;

import javax.annotation.Resource;

import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Controller;

import com.lingnet.common.action.BaseAction;
import com.lingnet.hcm.entity.person.BasicInformation;
import com.lingnet.hcm.entity.person.Change;
import com.lingnet.hcm.entity.person.Education;
import com.lingnet.hcm.entity.person.PtJob;
import com.lingnet.hcm.service.empdata.EducationService;
import com.lingnet.hcm.service.personnel.PersonnelService;
import com.lingnet.qxgl.entity.Branch;
import com.lingnet.util.JsonUtil;

/**
 * 人员action
 * @ClassName: BranchAction 
 * @Description: TODO 
 * @author lsp
 * @date 2016-8-3 下午1:50:42 
 *
 */
@Controller
public class PersonnelAction extends BaseAction{

    private static final long serialVersionUID = 1L;
    
    @Resource(name="personnelService")
    private PersonnelService personnelService;
    
    @Resource(name="educationService")
    private EducationService educationService;
    
    private BasicInformation information;
    private Branch branch;
   
    private Education education;
    private Education education2;
    
    private String formdata;//添加数据的JSON串
    private String flag;//标志位
    private String departId;//部门ID
    private String departName;//部门
    private String filmId;//单位ID
    private String filmName;
    private String jobNumber;//

    //所有人员list页面
    public String list(){
        return "list";
    }
    //总页面
    public String all(){
        return "all";
    }
    // 其他页面调用的选择页
    public String show(){
        return "show";
    }
    
    //普通员工中的正式工list页面
    public String zsglist(){
        return "zsglist";
    }
    
    //普通员工中的试岗期list页面
    public String sgqlist(){
        return "sgqlist";
    }
    //普通员工中的试岗期转正
    public String zhuanzheng(){
        return "finish";
    }
    //普通员工中的试岗期转正保存数据
    public String finishInfo() {
    	if(formdata==null||formdata==""){
            return ajax(Status.success,"数据错误请联系管理员!");
        }else{
        	information=JsonUtil.toObject(formdata, BasicInformation.class);
        }
    	BasicInformation oldInfo=this.getBeanByCriteria(BasicInformation.class, Restrictions.eq("id", information.getId()));
    	if (oldInfo == null) {
    		return ajax(Status.success,"该条记录不存在!");
        }
        try { 
	    	oldInfo.setZzDate(information.getZzDate());
	    	oldInfo.setPost(information.getPost());
	    	oldInfo.setPostId(information.getPostId());
	    	oldInfo.setSpecificPost(information.getSpecificPost());
	    	oldInfo.setSpecificPostId(information.getSpecificPostId());
	    	oldInfo.setDepbeginDate(information.getDepbeginDate());
	    	oldInfo.setPostbeginDate(information.getPostbeginDate());
	    	oldInfo.setOnJob(2);
	    	oldInfo.setOnPost(0);
	        this.update(oldInfo);
	        //异动表中插入数据
	        Change change=new Change();
	        change.setChangeType(1);
	        change.setJobNumber(oldInfo.getJobNumber());
	        change.setFilm(oldInfo.getFilmId());
	        change.setSpanPost(oldInfo.getPostId());
	        change.setSpPost(oldInfo.getSpecificPostId());
	        change.setEmpType(oldInfo.getEmpType());
	        change.setOnJob(oldInfo.getOnJob());
	        change.setOnPost(oldInfo.getOnPost());
	        change.setDepbeginDate(oldInfo.getDepbeginDate());
	        change.setPostbeginDate(oldInfo.getPostbeginDate());
	        change.setChangedate(oldInfo.getZhuanzDate());//异动时间
	        this.save(change);
	        //兼职履历中插入主要职业
    		PtJob ptJob=this.getBeanByCriteria(PtJob.class, Restrictions.eq("personId", information.getId()));
    		if(ptJob!=null&&!"".equals(ptJob)){
    			ptJob.setIsDelete(0);
        		ptJob.setIsHostPost(1);//主要职位
        		ptJob.setDepId(information.getDepartId());//部门ID
        		ptJob.setFirmId(information.getFilmId());//单位ID
        		ptJob.setBeginTime(information.getBeginTime());
        		ptJob.setStandardPost(information.getPostId());
        		ptJob.setSpePost(information.getSpecificPostId());
        		this.update(ptJob);
    		}else{
    			PtJob ptJob2=new PtJob();
        		ptJob2.setPersonId(information.getId());
        		ptJob2.setIsDelete(0);
        		ptJob2.setIsHostPost(1);//主要职位
        		ptJob2.setDepId(information.getDepartId());//部门ID
        		ptJob2.setFirmId(information.getFilmId());//单位ID
        		ptJob2.setBeginTime(information.getBeginTime());
        		ptJob2.setStandardPost(information.getPostId());
        		ptJob2.setSpePost(information.getSpecificPostId());
        		this.save(ptJob2);
    		}
    		
	    	
        } catch (Exception e) {
            return ajax(Status.success,"操作失败！");
        }
        return ajax(Status.success,"success");
    }
    
    //劳务外包list页面
    public String lwwblist(){
        return "lwwblist";
    }
    //业务外包list页面
    public String ywwblist(){
        return "ywwblist";
    }
    //退休人员页面
    public String txlist(){
        return "txlist";
    }
    //离职人员页面
    public String lzlist(){
        return "lzlist";
    }
    //返聘人员页面
    public String fplist(){
        return "fplist";
    }
    //非在岗人员页面
    public String fzglist(){
        return "fzglist";
    }
    //技术工人页面
    public String jsgrlist(){
        return "jsgrlist";
    }
    //专业技术人员页面
    public String zyjsrylist(){
        return "zyjsrylist";
    }
    //复员军人页面
    public String fyjrlist(){
        return "fyjrlist";
    }
    //员工关注
    public String attentionlist(){
        return "attentionlist";
    }
    public String attentionadd(){
        return "attentionadd";
    }
    //员工访谈
    public String talklist(){
        return "talklist";
    }
    
    //获取人员list列表数据
    public String getPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getPersonByDepId(pager,searchData));
    	return ajax(Status.success,josn);
    }
    //人事资料添加页
    public String add(){
    	if(id==null||"".equals(id)){//添加
    		branch=this.getBeanById(Branch.class, filmId);
    	}else{//编辑
    		information=this.getBeanById(BasicInformation.class, id);
        	if(information!=null&&!"".equals(information)){
        		education=educationService.get(Education.class, Restrictions.eq("jobNumber", information.getJobNumber()),
        	    		Restrictions.eq("isAllday", 0),Restrictions.eq("highestEducation", 1));//全日制
        	    education2=educationService.get(Education.class, Restrictions.eq("jobNumber", information.getJobNumber()),
        	    		Restrictions.eq("isAllday", 1),Restrictions.eq("highestEducation", 1));//在职
        	}
    		departId=information.getDepartId();
        	departName=information.getDepartName();
        	filmId=information.getFilmId();
    		branch=this.getBeanById(Branch.class, filmId);
    	}
        return "add";
    }
    //人事资料保存
    public String saveOrUpdate() {
    	try {
            return ajax(Status.success, personnelService.saveOrUpdate(formdata,filmId));
        } catch (Exception e) {
            return ajax(Status.success, e.getMessage());
        }
    }

    //获取正式工list列表数据
    public String getZsgPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getZsgPerson(pager,searchData));
    	return ajax(Status.success,josn);
    }
    
    //获取试岗期list列表数据
    public String getSgqPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getSgqPerson(pager,searchData));
    	return ajax(Status.success,josn);
    }
    
    //获取实习生list列表数据
    public String getSxsPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getSxsPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    
    //获取劳务外包list列表数据
    public String getLwwbPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getLwwbPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    
    //获取业务外包list列表数据
    public String getYwwbPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getYwwbPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取离职人员list列表数据
    public String getLzPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getLzPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取退休人员list列表数据
    public String getTxPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getTxPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取返聘人员list列表数据
    public String getFpPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getFpPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取复原军人人员list列表数据
    public String getFyjrPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getFyjrPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取非在岗人员list列表数据
    public String getFzgPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getFzgPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取技术工人list列表数据
    public String getJsgrPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getJsgrPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    //获取专业技术人员list列表数据
    public String getZyjsryPersonData(){
    	String josn=JsonUtil.Encode(personnelService.getZyjsryPerson(pager, searchData));
    	return ajax(Status.success,josn);
    }
    
    //复转情况
    public String armylist(){
        return "armylist";
    }
    public String armyadd(){
        return "armyadd";
    }
    //教育经历
    public String edulist(){
        return "edulist";
    }
    public String eduadd(){
        return "eduadd";
    }
    //职业履历
    public String worklist(){
        return "worklist";
    }
    
    public String workadd(){
        return "workadd";
    }

    //电子档案
    public String recordlist(){
        return "recordlist";
    }
    public String recordadd(){
        return "recordadd";
    }
    //证照管理
    public String paperslist(){
        return "paperslist";
    }
    public String papersadd(){
        return "papersadd";
    }
    
    //合同管理
    public String pactlist(){
        return "pactlist";
    }
    public String pactadd(){
        return "pactadd";
    }

    
    
    //职称记录
    public String prolist(){
        return "prolist";
    }
    public String proadd(){
        return "proadd";
    }
   
    //人员异动
    public String ryydlist(){
        return "ryydlist";
    }
    //请假
    public String leavelist(){
        return "leavelist";
    }
    
    
//////////////////////////////////////////////////////////////////////////

    public String getFormdata() {
        return formdata;
    }
    public void setFormdata(String formdata) {
        this.formdata = formdata;
    }

	public String getFlag() {
		return flag;
	}
	public void setFlag(String flag) {
		this.flag = flag;
	}
	public BasicInformation getInformation() {
		return information;
	}
	public void setInformation(BasicInformation information) {
		this.information = information;
	}
	public String getDepartId() {
		return departId;
	}
	public void setDepartId(String departId) {
		this.departId = departId;
	}
	
	public Education getEducation() {
		return education;
	}
	public void setEducation(Education education) {
		this.education = education;
	}
	public Education getEducation2() {
		return education2;
	}
	public void setEducation2(Education education2) {
		this.education2 = education2;
	}
	public String getJobNumber() {
		return jobNumber;
	}
	public void setJobNumber(String jobNumber) {
		this.jobNumber = jobNumber;
	}
	public String getDepartName() {
		return departName;
	}
	public Branch getBranch() {
		return branch;
	}
	public void setBranch(Branch branch) {
		this.branch = branch;
	}
	public String getFilmId() {
		return filmId;
	}
	public void setFilmId(String filmId) {
		this.filmId = filmId;
	}
	public void setDepartName(String departName) {
		this.departName = departName;
	}
	public String getFilmName() {
		return filmName;
	}
	public void setFilmName(String filmName) {
		this.filmName = filmName;
	}


  
}
