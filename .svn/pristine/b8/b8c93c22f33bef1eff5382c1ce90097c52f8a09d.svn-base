package com.lingnet.hcm.action.check;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.hibernate.criterion.Restrictions;

import com.lingnet.common.action.BaseAction;   
import com.lingnet.hcm.entity.WorkFlowChild;
import com.lingnet.hcm.entity.check.CkEvectionRecord;
import com.lingnet.hcm.entity.check.CkOvertimeRecord;
import com.lingnet.hcm.entity.check.CkOvertimeSub;
import com.lingnet.hcm.entity.check.CkRestRecord;
import com.lingnet.qxgl.entity.QxUser;
import com.lingnet.qxgl.service.WorkFlowService;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.LingUtil;

public class OvertimeSubAction extends BaseAction{ 
    private static final long serialVersionUID = 1L;
    @Resource(name = "workflowservice")
    private WorkFlowService workflowservice;
    
    private String id;
    private CkOvertimeSub evection;
    private String jsondate;
    private String advid;
    private List<CkOvertimeSub> evectionlist;
    private String type;    //选中的审批流程节点类别
    private String pid;  //选中的审批流程节点id
    private String state;
    private String processId;
    public String giveapp(){
       return "give";
    }
    public String list(){
        return "list";
    }
    
    @SuppressWarnings({ "unchecked", "rawtypes" })
    public String jsonlist(){
        try {
            pager=this.findPager(CkOvertimeSub.class, pager, Restrictions.isNotNull("id"));
        } catch (Exception e) { 
            e.printStackTrace();
        } 
        Map result = new HashMap();
        List<Map<String, String>> retmap=new ArrayList<Map<String,String>>();
        for (int i = 0; i < pager.getResult().size(); i++) {
            Map<String, String> data=new HashMap<String, String>();
            CkOvertimeSub advasub=(CkOvertimeSub) pager.getResult().get(i);
            data.put("id", advasub.getId());
            data.put("auditName", advasub.getAuditName());
            data.put("auditDate", new SimpleDateFormat("yyyy/MM/dd").format(advasub.getAuditDate()));
            data.put("opinion", advasub.getOpinion());
            if(advasub.getAuditStatus()!=null&&advasub.getAuditStatus()==1){ 
                data.put("auditStatus", "同意");
            } else if(advasub.getAuditStatus()!=null&&advasub.getAuditStatus()==0){ 
                data.put("auditStatus", "驳回");
            }
            retmap.add(data);
        }
        result.put("data", retmap);
        result.put("total", pager.getTotalCount());
        String json = JsonUtil.Encode(result);
        return ajax(Status.success,json);
    }
    public String add(){
        if(id==null||"".equals(id.trim())){
            evection=new CkOvertimeSub();
            QxUser userinfo=LingUtil.userinfo();
            evection.setAuditId(userinfo.getUsername());
            evection.setAuditName(userinfo.getName());
            evection.setAuditDate(new Date());
            evection.setEvectType(type);
            evection.setPid(pid); 
        }else{
            evection=this.getBeanById(CkOvertimeSub.class, id); 
        }
        return "add";
    }
    
    public String saveOrUpdate(){
        if(jsondate==null||"".equals(jsondate.trim())){
            return ajax(Status.success,"数据错误，请联系管理员");
        }
        evection=JsonUtil.toObject(jsondate, CkOvertimeSub.class); 
        if(evection==null){
            return ajax(Status.success,"数据错误，请联系管理员");
        }else if(evection.getId()==null||"".equals(evection.getId().trim())){ 
            //调用一下，转到下一个审批人的方法。
            WorkFlowChild flowchil= workflowservice.findnextbyid(LingUtil.userinfo().getUsername());
            /*驳回，需把上级*/
                switch (Integer.parseInt(evection.getEvectType())) {
                case 1: 
                    CkEvectionRecord evecinfo=this.getBeanById(CkEvectionRecord.class, evection.getPid());
                    if(evection.getAuditStatus()==0){
                    if(evecinfo==null){
                        return ajax(Status.success,"数据错误，请联系管理员");
                    }else{
                        evecinfo.setField2(evection.getField1());
                    }
                    }else{
                        evecinfo.setField2(flowchil.getAppid());
                    }
                    this.update(evecinfo);
                    break;
                case 2: 
                    CkRestRecord restinfo=this.getBeanById(CkRestRecord.class, evection.getPid());
                    if(evection.getAuditStatus()==0){
                    if(restinfo==null){
                        return ajax(Status.success,"数据错误，请联系管理员");
                    }else{
                        restinfo.setField2(evection.getField1());
                    }
                    }else{
                        restinfo.setField2(flowchil.getAppid());
                    }
                    this.update(restinfo);
                    break;
                case 3:
                    CkOvertimeRecord overtimeinfo=this.getBeanById(CkOvertimeRecord.class, evection.getPid());
                    if(evection.getAuditStatus()==0){
                    if(overtimeinfo==null){
                        return ajax(Status.success,"数据错误，请联系管理员");
                    }else{
                        overtimeinfo.setField2(evection.getField1());
                    }
                    }else{
                        overtimeinfo.setField2(flowchil.getAppid());
                    }
                    this.update(overtimeinfo);
                    break;
                default:
                    return ajax(Status.success,"数据错误，请联系管理员"); 
                } 
             
            this.save(evection);
        }else{
            
            ///暂时没设计修改意见的地方。。 
            this.update(evection);
        }
        return ajax(Status.success,"保存成功");
    }
    
    public String remove(){
        if(id==null||"".equals(id.trim())){
            return ajax(Status.success,"数据错误，请联系管理员");
        }else{
            try {
                this.deleteByCriteria(CkOvertimeSub.class, id);
                return ajax(Status.success,"删除成功");
            } catch (Exception e) {
                return ajax(Status.success,"数据错误，请联系管理员");
            }
        }
    }
    
 
/*/************************************************************************/
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public CkOvertimeSub getEvection() {
        return evection;
    }
    public void setEvection(CkOvertimeSub evection) {
        this.evection = evection;
    }
    public String getJsondate() {
        return jsondate;
    }
    public void setJsondate(String jsondate) {
        this.jsondate = jsondate;
    }
    public String getAdvid() {
        return advid;
    }
    public void setAdvid(String advid) {
        this.advid = advid;
    }
    public List<CkOvertimeSub> getEvectionlist() {
        return evectionlist;
    }
    public void setEvectionlist(List<CkOvertimeSub> evectionlist) {
        this.evectionlist = evectionlist;
    }
    public String getType() {
        return type;
    }
    public void setType(String type) {
        this.type = type;
    }
    public String getPid() {
        return pid;
    }
    public void setPid(String pid) {
        this.pid = pid;
    }
    public String getState() {
        return state;
    }
    public void setState(String state) {
        this.state = state;
    }
    public String getProcessId() {
        return processId;
    }
    public void setProcessId(String processId) {
        this.processId = processId;
    } 
}
