package com.lingnet.qxgl.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.Restrictions;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.lingnet.common.dao.impl.BaseDaoImplInit;
import com.lingnet.qxgl.dao.AdminDao;
import com.lingnet.qxgl.dao.QxusedepDao;
import com.lingnet.qxgl.entity.QxResource;
import com.lingnet.qxgl.entity.QxUseDep;
import com.lingnet.qxgl.entity.QxUsers;
import com.lingnet.util.Pager;
import com.opensymphony.xwork2.ActionContext;

@Repository("adminDao")
public class AdminDaoImpl extends BaseDaoImplInit<QxUsers, String> implements
		AdminDao {
    
    /**
     * 根据部门返回人员信息
     * 
     * @param depId pager
     * @return
     */
    @Resource(name="qxusedepDao")
    private QxusedepDao qxusedepDao;

    @SuppressWarnings("rawtypes")
    @Override
    public List getUsersByDepId(Pager pager,String depId,String key,String cid){
        List data = null;
        Conjunction con=  Restrictions.conjunction();
        try {
            List<QxUseDep> list = qxusedepDao.getList(Restrictions.eq("depId",depId ));
            int l = list.size();
            String[] ids = new String[l];
            if(list!=null&&list.size()>0){
                for(int i= 0 ; i< l ; i++){
                    QxUseDep ud = list.get(i);
                    ids[i] = ud.getUserId();
                }
            }
            if(ids!=null&&ids.length>0){
                con.add(Restrictions.in("id", ids));
                con.add(Restrictions.eq("isDelete", 0));
                if(StringUtils.isNotBlank(key)){
                    con.add(Restrictions.like("username","%"+key+"%"));
                }
                if(StringUtils.isNotBlank(cid)){
                    con.add(Restrictions.eq("cid", cid));
                }
                pager = findPager(pager, getSession().createCriteria(QxUsers.class).add(con));
                data = pager.getResult();
            }
                
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        
        return data;
        
        
    }
	/**
	 * 根据用户名返回所有权限属性
	 * 
	 * @param userName
	 * @return
	 */
	public List<QxResource> getResourceByUserName(String userName,int moudleId, String modelArea) {
	    String dataPro =(String)ActionContext.getContext().getSession().get("dataPro");
        String sql = "";
        if(dataPro.equals("oracle")){
	    /**oracle版本*/
            sql = "SELECT DISTINCT * from (SELECT r.ID,r.RESOURCENAME,r.RESOURCEURL,r.DESCRIPTION,r.PRESOURCE,r.IMGVALUE,r.MODULEID,r.STATE,r.sortorder,r.MODULENAME FROM Qx_Users u "
                   +"JOIN qx_user_role ur ON u.ID = ur.USER_ID "
                   +"JOIN qx_role_resource rr ON ur.ROLE_ID = rr.ROLE_ID "
                   +"JOIN qx_resource r ON r.ID = rr.RESOURCE_ID " 
                   +"WHERE u.USERNAME = ? and r.type='MENU' "
                   +"AND r.MODULENAME = ? "// 模块显示
                   +") where MODULEID=? and STATE='1' order by sortorder asc";
        }else{
            /*mysql版本*/
             sql = "SELECT DISTINCT * from (SELECT r.ID,r.RESOURCENAME,r.RESOURCEURL,r.DESCRIPTION,r.PRESOURCE,r.IMGVALUE,r.MODULEID,r.STATE,r.sortorder,r.MODULENAME FROM Qx_Users u "
                   +"JOIN qx_user_role ur ON u.ID = ur.USER_ID "
                   +"JOIN qx_role_resource rr ON ur.ROLE_ID = rr.ROLE_ID "
                   +"JOIN qx_resource r ON r.ID = rr.RESOURCE_ID " 
                   +"WHERE u.USERNAME = ? and r.type='MENU' "
                   +"and r.MODULENAME = ? "// 模块显示
                   +") as bm  where bm.MODULEID=? and bm.STATE='1' order by bm.sortorder";
            
        }
        
		return getJdbcTemplate().query(sql, new Object[] { userName, modelArea, moudleId},
				new RowMapper<QxResource>() {
					public QxResource mapRow(ResultSet resultSet,
							int rowNum) throws SQLException {
						QxResource resource = new QxResource();
						resource.setId(resultSet.getString(1));
						resource.setResourcename(resultSet.getString(2));
						resource.setResourceurl(resultSet.getString(3));
						resource.setDescription(resultSet.getString(4));
						resource.setPresource(resultSet.getString(5));
						resource.setImgvalue(resultSet.getString(6));
						resource.setModulename(resultSet.getString(10));
						return resource;
					}
				});
	}
	
	/**
	 * 返回最大层级
	 * **/
	public Integer getMenuSize(String userName) {
	    
	    String dataPro =(String)ActionContext.getContext().getSession().get("dataPro");
	    StringBuffer sql = new StringBuffer();
	    if(dataPro.equals("oracle")){
	        /**oracle版本启动*/
	        sql.append("Select Max(MODULEID)");
	        sql.append("  from (SELECT DISTINCT * ");
	        sql.append("           from (SELECT r.MODULEID,");
	        sql.append("                        r.STATE");
	        sql.append("                 FROM Qx_Users u ");
	        sql.append("                 JOIN qx_user_role ur ");
	        sql.append("                    ON u.ID = ur.USER_ID ");
	        sql.append("                 JOIN qx_role_resource rr ");
	        sql.append("                    ON ur.ROLE_ID = rr.ROLE_ID ");
	        sql.append("                 JOIN qx_resource r ");
	        sql.append("                    ON r.ID = rr.RESOURCE_ID ");
	        sql.append("            WHERE u.USERNAME = ? and r.type='MENU') ");
	        sql.append(" where STATE='1') ");
	        
	    }else{
	        /**mysql版本启动*/
	        sql.append("Select Max(bmn.MODULEID)");
            sql.append("  from (SELECT DISTINCT * ");
            sql.append("           from (SELECT r.MODULEID,");
            sql.append("                        r.STATE");
            sql.append("                 FROM Qx_Users u ");
            sql.append("                 JOIN qx_user_role ur ");
            sql.append("                    ON u.ID = ur.USER_ID ");
            sql.append("                 JOIN qx_role_resource rr ");
            sql.append("                    ON ur.ROLE_ID = rr.ROLE_ID ");
            sql.append("                 JOIN qx_resource r ");
            sql.append("                    ON r.ID = rr.RESOURCE_ID ");
            sql.append("            WHERE u.USERNAME = ? and r.type='MENU') as bm");
            sql.append(" where bm.STATE='1') as bmn");
	    }
	    
	       
	    return getJdbcTemplate().queryForObject(sql.toString(), 
	            new Object[] {userName}, 
	            java.lang.Integer.class); 


	}
	

	public QxUsers findUserByName(String username) {
		String HQL = "FROM QxUsers as qxusers WHERE qxusers.username = ? and qxusers.isDelete=0  ";
		return uniqueResult(HQL, username);
	}
 
	public boolean isExistByUsername(String username) {
		String HQL = "FROM QxUsers as qxusers WHERE qxusers.username = ? and qxusers.isDelete='0'";
		QxUsers qxusers = uniqueResult(HQL, username);
		if (qxusers != null) {
			return true;
		} else {
			return false;
		}
	}
    @Override
    public String getAuthManageMenu(String name, int leve) {
        String dataPro =(String)ActionContext.getContext().getSession().get("dataPro");
        String sql = "";
//        if(dataPro.equals("oracle")){
        /**oracle版本*/
            sql = "SELECT DISTINCT r.MODULENAME FROM Qx_Users u "
                   +"JOIN qx_user_role ur ON u.ID = ur.USER_ID "
                   +"JOIN qx_role_resource rr ON ur.ROLE_ID = rr.ROLE_ID "
                   +"JOIN qx_resource r ON r.ID = rr.RESOURCE_ID " 
                   +"WHERE u.USERNAME = '"+name+"' and r.type='MENU' ";
//        }else{
//            /*mysql版本*/
//             sql = "SELECT distinct r.MODULENAME FROM Qx_Users u "
//                   +"JOIN qx_user_role ur ON u.ID = ur.USER_ID "
//                   +"JOIN qx_role_resource rr ON ur.ROLE_ID = rr.ROLE_ID "
//                   +"JOIN qx_resource r ON r.ID = rr.RESOURCE_ID " 
//                   +"WHERE u.USERNAME = '"+name+"' and r.type='MENU' ";
//            
//        }
        List<?> list = findBySql(sql);
        String menu = "";
        if (list.size() > 0) {
            for (Object object : list) {
                menu += object + ",";
            }
            menu = menu.substring(0, menu.length()-1);
        }

        return menu;
    }

}
