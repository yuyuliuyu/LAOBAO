package com.lingnet.util;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;

import com.lingnet.common.action.BaseAction;
import com.lingnet.hcm.entity.salary.MonthSalary;
import com.lingnet.hcm.entity.salary.Perioddata;
import com.lingnet.hcm.entity.salary.SalaryBaseDictionary;
import com.lingnet.hcm.entity.salary.SalaryInsurance;
import com.lingnet.hcm.entity.salary.SalaryRecord;
import com.lingnet.hcm.entity.salary.SalaryValue;
import com.lingnet.hcm.service.salary.FormulaService;
import com.lingnet.qxgl.entity.JcDictionary;

/**
 * 公式解析
 * @ClassName: FormulaUtil 
 * @Description: TODO 
 * @author zhanghj
 * @date 2017年6月29日 下午12:52:20 
 *
 */
@Service("formulaUtil")
public class FormulaUtil extends BaseAction {

    private static final long serialVersionUID = -5406590856072164378L;

    @Resource(name="formulaService")
    private FormulaService formulaService;

    /**
     * @Title: 获取当前日期 
     * @return 
     * Date 
     * @author zhanghj
     * @since 2017年3月31日 V 1.0
     */
    public Date getCurDate() {
        return new Date();
    }

    /**
     * @Title: 提取年 
     * @param date
     * @return 
     * int 
     * @author zhanghj
     * @since 2017年3月31日 V 1.0
     */
    public int getYear(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);

        return year;
    }

    /**
     * @Title: 提取月 
     * @param date
     * @return 
     * int 
     * @author zhanghj
     * @since 2017年3月31日 V 1.0
     */
    public int getMonth(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int month = cal.get(Calendar.MONTH);

        return month;
    }

    /**
     * @Title: 提取日 
     * @param date
     * @return 
     * int 
     * @author zhanghj
     * @since 2017年3月31日 V 1.0
     */
    public int getDay(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        return day;
    }

    /**
     * @Title: 获取某年某月的天数 
     * @param year
     * @param month
     * @return 
     * int 
     * @author zhanghj
     * @since 2017年3月31日 V 1.0
     */
    public int getMonthDays(int year, int month) {
        Calendar cal = Calendar.getInstance();
        cal.set(year, month, 1);
        cal.add(Calendar.DATE, -1);
        int days = cal.get(Calendar.DAY_OF_MONTH);

        return days;
    }

    /**
     * @Title: 获取员工ID
     * @param staffId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月5日 V 1.0
     */
    public String getGridRowStaffId(String B_staffId) {
        return B_staffId;
    }

    /**
     * @Title: 基本工资计算
     * @param staffId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月5日 V 1.0
     */
    public String getBaseSalary(String B_staffId) {
        SalaryRecord record = getBeanByCriteria(SalaryRecord.class, Restrictions.eq("staffId", B_staffId));
        if (record != null) {
            // 获取薪酬岗位
            String salaryPost = record.getSalaryPost();
            if (!StringUtils.isBlank(salaryPost)) {
                StringBuilder sql = new StringBuilder();
                sql.append("     SELECT SR.STAFF_ID, NVL(LLEVEL.XS, 0)+NVL(SBD.XS, 0) XS,  ");
                sql.append("        NVL((TO_CHAR(SB.OUTSOL_DATE, 'yyyy')-TO_CHAR(SB.INSOL_DATE, 'yyyy') + 1), 0) SOLDIER_AGE,   ");
                sql.append("        NVL(JBI.AGE, 0) AGE, NVL(JBI.SEX, -1) SEX,   ");
                sql.append("        NVL(FLOOR(SYSDATE - TO_DATE(TO_CHAR(JBI.IN_PORT_TIME, 'yyyy-MM-dd'),'yyyy-MM-dd')), 0) joinG,   ");// 入港时间--》得到入港天数
                sql.append("        NVL(TO_CHAR(SYSDATE, 'yyyy')-TO_CHAR(SR.GD_DATE, 'yyyy'), 0) GD_DATE    ");// 股东双方日期
                sql.append("     FROM XC_SALARY_RECORD SR                                  ");
                sql.append("     LEFT JOIN                                                 ");
                sql.append("       (SELECT SBD.ZJLB_CODE, SDD.NAME,                        ");
                sql.append("         SDD.ID, SBD.XS                                        ");
                sql.append("       FROM XC_SALARY_BASE_DICTIONARY SBD                      ");
                sql.append("       LEFT JOIN XC_SALARY_DEPT_DICTIONARY SDD                 ");
                sql.append("       ON SBD.ZJLB_CODE  = SDD.ZJLB                            ");
                sql.append("       AND SDD.IS_DELETE = 0                                   ");
                sql.append("       WHERE SBD.TYPE    = 1                                   ");
                sql.append("       AND SBD.IS_DELETE = 0                                   ");
                sql.append("       ) LLEVEL                                                ");
                sql.append("       ON SR.SALARY_POST = LLEVEL.ID                           ");
                sql.append("     LEFT JOIN JC_BASIC_INFORMATION JBI                        ");
                sql.append("       ON SR.STAFF_ID = JBI.ID                                 ");
                sql.append("     LEFT JOIN XC_SALARY_BASE_DICTIONARY SBD                   ");
                sql.append("       ON JBI.EMP_TYPE = SBD.ZJLB_CODE                         ");
                sql.append("      AND SBD.TYPE = 2                                         ");
                sql.append("      AND SBD.IS_DELETE = 0                                    ");
                sql.append("     LEFT JOIN JC_SOLDIER_BACK SB                   ");
                sql.append("       ON JBI.JOB_NUMBER = SB.JOB_NUMBER                         ");
                sql.append("     WHERE SR.STAFF_ID = '"+B_staffId+"'                         ");
                List<?> list = formulaService.findBySql(sql.toString());
                int totalXs = 0;
                if (list.size() > 0) {
                    Object[] obj = (Object[]) list.get(0);
                    int xs = Integer.valueOf(obj[1].toString());
                    int soldierAge = Integer.valueOf(obj[2].toString());// 在岗工龄= 军龄+进入股东双方日期
                    int gdDate = Integer.valueOf(obj[6].toString());// 股东双方日期
                    int age = Integer.valueOf(obj[3].toString());
                    int sex = Integer.valueOf(obj[4].toString());
                    int joinG = Integer.valueOf(obj[5].toString());

                    // 查找在港工龄系数
                    int zgglxs = 0;
                    SalaryBaseDictionary dictionary = getBeanByCriteria(SalaryBaseDictionary.class,
                            Restrictions.ge("zjlbCode", soldierAge + gdDate),
                            Restrictions.lt("zjlbCode2", soldierAge + gdDate),
                            Restrictions.eq("type", 3));
                    if (dictionary != null) {
                        zgglxs = dictionary.getXs();
                    }

                    // 年龄倾斜系数
                    int nlqxxs = 0;
                    if (sex != -1) {
                        if (sex == 1) sex = 4;// 男
                        else sex = 5;// 女
                        SalaryBaseDictionary ageDictionary = getBeanByCriteria(SalaryBaseDictionary.class,
                                Restrictions.ge("zjlbCode", age),
                                Restrictions.lt("zjlbCode2", age),
                                Restrictions.eq("type", sex));
                        if (ageDictionary != null) {
                            nlqxxs = dictionary.getXs();
                        }
                    }
                    totalXs = xs + zgglxs + nlqxxs;

                    // 3*单价*系数
                    int year = joinG / 365;
                    if (year > 0) {
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(new Date());
                        int month = calendar.get(Calendar.MONTH) + 1;
                        if (month == 1) {
                            year += 1;// 一月份为初始月开始计算
                        }
                    }

                    // 获取职级单价字典
                    Double price = 0d;
                    JcDictionary jcDictionary = getBeanByCriteria(JcDictionary.class, Restrictions.eq("pid", "402881945c75bcc7015c75c319d20007"),
                            Restrictions.eq("dicname", (year==0?1: year)+""));
                    if (jcDictionary != null) {
                        price = Double.valueOf(jcDictionary.getDicvalue());
                    } else {
                        price = 1d;
                    }

                    return String.valueOf(3 * price * totalXs);
                } else return "0";
            } else {
                return "0";
            }
        } else {
            return "0";
        }
    }

    /**
     * @Title: 获取工月平均工资
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月10日 V 1.0
     */
    public String getStaffMonthAvgSalary(String B_staffId, int offset) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        int year = cal.get(Calendar.YEAR);
        MonthSalary monthSalary = getBeanByCriteria(MonthSalary.class,
                Restrictions.eq("staffId", B_staffId),
                Restrictions.eq("effectiveYear", year - offset),
                Restrictions.eq("isDelete", 0));
        if (monthSalary == null) {
            return "0";
        } else return monthSalary.getAverageSalary();
    }

    /**
     * @Title: 获取公司缴费基数
     * @param insuranceId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月19日 V 1.0
     */
    public String getBaseCompanyToJf(String B_companyId, String insuranceId) {
        if (StringUtils.isBlank(insuranceId)) {
            return "0";
        }
        SalaryInsurance insurance = getBeanByCriteria(SalaryInsurance.class,
                Restrictions.eq("name", insuranceId),
                Restrictions.eq("companyId", B_companyId),
                Restrictions.eq("isDelete", 0));
        if (insurance != null)
            return insurance.getBaseCompanyMath();
        else return "0";
    }

    /**
     * @Title: 获取公司缴费比例
     * @param insuranceId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月19日 V 1.0
     */
    public String getCompanyJfBl(String B_companyId, String insuranceId) {
        if (StringUtils.isBlank(insuranceId)) {
            return "0";
        }
        SalaryInsurance insurance = getBeanByCriteria(SalaryInsurance.class,
                Restrictions.eq("name", insuranceId),
                Restrictions.eq("companyId", B_companyId),
                Restrictions.eq("isDelete", 0));
        if (insurance != null)
            return insurance.getBiCompany();
        else return "0";
    }

    /**
     * @Title: 获取保险公司缴费公式
     * @param insuranceId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月19日 V 1.0
     */
    @Deprecated
    public String getCompanyJf(String B_companyId, String insuranceId) {
        if (StringUtils.isBlank(insuranceId)) {
            return "0";
        }
        SalaryInsurance insurance = getBeanByCriteria(SalaryInsurance.class,
                Restrictions.eq("name", insuranceId),
                Restrictions.eq("companyId", B_companyId),
                Restrictions.eq("isDelete", 0));
        if (insurance != null)
            return insurance.getCompanyFormulaMath();
        else return "0";
    }

    /**
     * @Title: 获取员工缴费基数
     * @param insuranceId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月19日 V 1.0
     */
    public String getBasePersonalToJf(String B_companyId, String insuranceId) {
        if (StringUtils.isBlank(insuranceId)) {
            return "0";
        }
        SalaryInsurance insurance = getBeanByCriteria(SalaryInsurance.class,
                Restrictions.eq("name", insuranceId),
                Restrictions.eq("companyId", B_companyId),
                Restrictions.eq("isDelete", 0));
        if (insurance != null)
            return insurance.getBasePersonalMath();
        else return "0";
    }

    /**
     * @Title: 获取员工缴费比例
     * @param insuranceId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月19日 V 1.0
     */
    public String getPersonalJfBl(String B_companyId, String insuranceId) {
        if (StringUtils.isBlank(insuranceId)) {
            return "0";
        }
        SalaryInsurance insurance = getBeanByCriteria(SalaryInsurance.class,
                Restrictions.eq("name", insuranceId),
                Restrictions.eq("companyId", B_companyId),
                Restrictions.eq("isDelete", 0));
        if (insurance != null)
            return insurance.getBiPersonal();
        else return "0";
    }

    /**
     * @Title: 获取保险员工缴费公式
     * @param insuranceId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月19日 V 1.0
     */
    @Deprecated
    public String getPersonalJf(String B_companyId, String insuranceId) {
        if (StringUtils.isBlank(insuranceId)) {
            return "0";
        }
        SalaryInsurance insurance = getBeanByCriteria(SalaryInsurance.class,
                Restrictions.eq("name", insuranceId),
                Restrictions.eq("companyId", B_companyId),
                Restrictions.eq("isDelete", 0));
        if (insurance != null) {
            return insurance.getPersonalFormulaMath();
        }
        else return "0";
    }

    /**
     * @Title: 获取公司保险项目薪酬期间正常缴费额
     * @param B_companyId 公司ID
     * @param B_staffId 员工ID
     * @param T_salaryPeriod 薪酬期间
     * @param insuranceId 保险项目
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月30日 V 1.0
     */
    public String getComInsuranceCharge(String B_companyId, String B_staffId, String T_salaryPeriod, String insuranceId) {
        Object v = "0";
        List<?> list = findBySql(getInsuranceChargeSql(B_companyId, B_staffId, insuranceId, T_salaryPeriod, 0));
        if (list.size() > 0) {
            Object[] obj = (Object[]) list.get(0);
            v = obj[1] == null ? "0" : obj[1];
        }

        return v.toString();
    }

    /**
     * @Title: 获取公司保险项目薪酬期间补缴缴费额
     * @param B_companyId 公司ID
     * @param B_staffId 员工ID
     * @param T_salaryPeriod 薪酬期间
     * @param insuranceId 保险项目
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月30日 V 1.0
     */
    public String getComInsuranceBjCharge(String B_companyId, String B_staffId, String T_salaryPeriod, String insuranceId) {
        Object v = "0";
        List<?> list = findBySql(getInsuranceChargeSql(B_companyId, B_staffId, insuranceId, T_salaryPeriod, 1));
        if (list.size() > 0) {
            Object[] obj = (Object[]) list.get(0);
            v = obj[1] == null ? "0" : obj[1];
        }

        return v.toString();
    }

    /**
     * @Title: 获取个人保险项目薪酬期间正常缴费额
     * @param B_companyId 公司ID
     * @param B_staffId 员工ID
     * @param T_salaryPeriod 薪酬期间
     * @param insuranceId 保险项目
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月30日 V 1.0
     */
    public String getPerInsuranceCharge(String B_companyId, String B_staffId, String T_salaryPeriod, String insuranceId) {
        Object v = "0";
        List<?> list = findBySql(getInsuranceChargeSql(B_companyId, B_staffId, insuranceId, T_salaryPeriod, 0));
        if (list.size() > 0) {
            Object[] obj = (Object[]) list.get(0);
            v = obj[2] == null ? "0" : obj[2];
        }

        return v.toString();
    }

    /**
     * @Title: 获取个人保险项目薪酬期间补缴缴费额
     * @param B_companyId 公司ID
     * @param B_staffId 员工ID
     * @param T_salaryPeriod 薪酬期间
     * @param insuranceId 保险项目
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月30日 V 1.0
     */
    public String getPerInsuranceBjCharge(String B_companyId, String B_staffId, String T_salaryPeriod, String insuranceId) {
        Object v = "0";
        List<?> list = findBySql(getInsuranceChargeSql(B_companyId, B_staffId, insuranceId, T_salaryPeriod, 1));
        if (list.size() > 0) {
            Object[] obj = (Object[]) list.get(0);
            v = obj[2] == null ? "0" : obj[2];
        }

        return v.toString();
    }

    /**
     * @Title: 获取员工关联薪资项目值
     * @param staffId
     * @param itemsId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月26日 V 1.0
     */
    public String getStaffStandItemsValue(String B_staffId, String itemsId) {
        SalaryValue value = getBeanByCriteria(SalaryValue.class,
                Restrictions.eq("staffId", B_staffId),
                Restrictions.eq("salaryItemsId", itemsId),
                Restrictions.eq("isDelete", 0));
        if (value == null) return "0";
        return value.getStaticValue();
    }

    /**
     * @Title: 根据公司，员工，福利项目以及是否补缴得到员工缴费信息sql语句
     * @param companyId
     * @param starffId
     * @param insuranceId
     * @param T_salaryPeriod
     * @param isPayOff
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年6月30日 V 1.0
     */
    private String getInsuranceChargeSql(String companyId, String starffId, String insuranceId, String T_salaryPeriod, int isPayOff) {
        // 根据薪酬期间算出对应的年份与月份
        Perioddata perioddata = getBeanByCriteria(Perioddata.class, Restrictions.eq("id", T_salaryPeriod));
        int year = 0;
        int month = 0;
        if (perioddata != null) {
            Calendar cal = Calendar.getInstance();
            cal.setTime(perioddata.getStartDate());
            year = cal.get(Calendar.YEAR);
            month = cal.get(Calendar.MONTH) + 1;
        }
        StringBuilder sql = new StringBuilder();
        sql.append("     SELECT PP.ID,                                              ");
        sql.append("       PI.PAYMENT_COMPANY, PI.PAYMENT_PERSONAL,  ");
        sql.append("       PP.IS_PAY_BACK, PP.PAY_BACK_YEAR, PP.PAY_BACK_MONTH      ");
        sql.append("     FROM XC_PROCESS_PAYMENT PP                                 ");
        sql.append("     LEFT JOIN XC_PAYMENT_INSURANCE PI                          ");
        sql.append("     ON PP.ID = PI.SALARY_PAYMENT_PROCESS_ID                    ");
        sql.append("     LEFT JOIN XC_SALARY_RECORD SR                              ");
        sql.append("     ON SR.STAFF_ID = PP.STAFF_ID                               ");
        sql.append("     WHERE PP.IS_DELETE = 0                                     ");
        sql.append("     AND PI.IS_DELETE = 0                                       ");
        sql.append("     AND SR.STAFF_ID = '"+starffId+"'                           ");
        sql.append("     AND SR.FILM_NAME = '"+companyId+"'                         ");
        sql.append("     AND PI.IBF_ID = '"+insuranceId+"'                          ");
        sql.append("     AND PP.IS_PAY_BACK = "+isPayOff+"                          ");
        sql.append("     AND PP.JF_YEAR = "+year+"                          ");
        sql.append("     AND PP.JF_MONTH = "+month+"                        ");

        return sql.toString();
    }

}
