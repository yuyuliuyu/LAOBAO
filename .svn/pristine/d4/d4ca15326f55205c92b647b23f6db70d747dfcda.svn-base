package com.lingnet.hcm.service.impl.check;

import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Service;

import com.lingnet.common.service.impl.BaseServiceImpl;
import com.lingnet.hcm.dao.check.ContentDao;
import com.lingnet.hcm.dao.personnel.PersonnelDao;
import com.lingnet.hcm.entity.check.CkContent;
import com.lingnet.hcm.service.check.ContentService;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;
/**
 * 
 * @ClassName: ContentServiceImpl 
 * @Description: 考勤内容控制层 
 * @author wangqiang
 * @date 2017年4月1日 上午9:12:03 
 *
 */
@Service("contentService")
public class ContentServiceImpl extends BaseServiceImpl<CkContent, String> implements ContentService{
	
	@Resource(name = "contentDao")
	private ContentDao contentDao;
	
	@Resource(name="personnelDao")
	private PersonnelDao personnelDao;

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public Map<String, Object> getDataByCond(Pager pager) {
		String userId = toolUtil.getUserId();
		//获得考勤内容信息集合
		List<Map<String, Object>> datas = contentDao.getInfoByCond(pager, userId);
        HashMap result = new HashMap();
        result.put("data", datas);
        result.put("total", pager.getTotalCount());
		return result;
	}

	@Override
	public void saveOrUpdateInfo(String formdata) throws Exception {
		String userId = toolUtil.getUserId();
		String checkUnitId = personnelDao.getCheckUnitIdById(userId);//获得考勤部门
		Map<String,String> dataMap = JsonUtil.parseProperties(formdata);
		if (!dataMap.isEmpty()){
			if (!"".equals(dataMap.get("id"))){//修改
				CkContent content = contentDao.get(dataMap.get("id"));
				content = changeValues(content, dataMap);
				contentDao.update(content);
			} else {//保存
				checkUnitId = personnelDao.getCheckUnitIdById(userId);//获得考勤部门
				CkContent content = new CkContent();
				content = changeValues(content, dataMap);
				content.setUserId(userId);
				content.setDepId(checkUnitId);
				content.setIsDelete(0);
				contentDao.save(content);
			}
		}
	}
	
	/**
	 * 替换修改信息
	 * @Title: changeValues 
	 * @param content
	 * @param dataMap
	 * @return 
	 * @author wangqiang
	 * @since 2017年4月1日 V 1.0
	 */
	public CkContent changeValues(CkContent content, Map<String,String> dataMap) throws Exception{
		content.setContent(dataMap.get("content"));
		content.setContentType(dataMap.get("contentType"));
		content.setOutWork(Double.valueOf(dataMap.get("outWork")));
		content.setPost(Double.valueOf(dataMap.get("post")));
		content.setOutDuty(Double.valueOf(dataMap.get("outDuty")));
		content.setCentre(Double.valueOf(dataMap.get("centre")));
		content.setNight(Double.valueOf(dataMap.get("night")));
		content.setYear(Double.valueOf(dataMap.get("year")));
		content.setThing(Double.valueOf(dataMap.get("thing")));
		content.setDisease(Double.valueOf(dataMap.get("disease")));
		content.setFree(Double.valueOf(dataMap.get("free")));
		content.setStay(Double.valueOf(dataMap.get("stay")));
		content.setInjury(Double.valueOf(dataMap.get("injury")));
		content.setMarry(Double.valueOf(dataMap.get("marry")));
		content.setLost(Double.valueOf(dataMap.get("lost")));
		content.setExplore(Double.valueOf(dataMap.get("explore")));
		content.setGive(Double.valueOf(dataMap.get("give")));
		content.setFlip(Double.valueOf(dataMap.get("flip")));
		content.setBigClass(Double.valueOf(dataMap.get("bigClass")));
		content.setSmallClass(Double.valueOf(dataMap.get("smallClass")));
		content.setBigNight(Double.valueOf(dataMap.get("bigNight")));
		content.setSmallNight(Double.valueOf(dataMap.get("smallNight")));
		content.setOverseas(Double.valueOf(dataMap.get("overseas")));
		content.setOther(Double.valueOf(dataMap.get("other")));
		content.setOvertimeModulus(Double.valueOf(dataMap.get("overtimeModulus")));
		content.setVacationModulus(Double.valueOf(dataMap.get("vacationModulus")));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if (dataMap.get("startTimeb1") != null){
			String startTimeb1 = dataMap.get("startTimeb1");
			startTimeb1 = startTimeb1.replace("T", " ");
			content.setStartTimeb1(sdf.parse(startTimeb1));
		}
		if (dataMap.get("startTimef1") != null){
			String startTimef1 = dataMap.get("startTimef1");
			startTimef1 = startTimef1.replace("T", " ");
			content.setStartTimef1(sdf.parse(startTimef1));
		}
		if (dataMap.get("endTimeb1") != null){
			String endTimeb1 = dataMap.get("endTimeb1");
			endTimeb1 = endTimeb1.replace("T", " ");
			content.setEndTimeb1(sdf.parse(endTimeb1));
		}
		if (dataMap.get("endTimef1") != null){
			String endTimef1 = dataMap.get("endTimef1");
			endTimef1 = endTimef1.replace("T", " ");
			content.setEndTimef1(sdf.parse(endTimef1));
		}
		if (dataMap.get("startTimeb2") != null){
			String startTimeb2 = dataMap.get("startTimeb2");
			startTimeb2 = startTimeb2.replace("T", " ");
			content.setStartTimeb2(sdf.parse(startTimeb2));
		}
		if (dataMap.get("startTimef2") != null){
			String startTimef2 = dataMap.get("startTimef2");
			startTimef2 = startTimef2.replace("T", " ");
			content.setStartTimef2(sdf.parse(startTimef2));
		}
		if (dataMap.get("endTimeb2") != null){
			String endTimeb2 = dataMap.get("endTimeb2");
			endTimeb2 = endTimeb2.replace("T", " ");
			content.setEndTimeb2(sdf.parse(endTimeb2));
		}
		if (dataMap.get("endTimef2") != null){
			String endTimef2 = dataMap.get("endTimef2");
			endTimef2 = endTimef2.replace("T", " ");
			content.setEndTimef2(sdf.parse(endTimef2));
		}
		if (dataMap.get("startTimeb3") != null){
			String startTimeb3 = dataMap.get("startTimeb3");
			startTimeb3 = startTimeb3.replace("T", " ");
			content.setStartTimeb3(sdf.parse(startTimeb3));
		}
		if (dataMap.get("startTimef3") != null){
			String startTimef3 = dataMap.get("startTimef3");
			startTimef3 = startTimef3.replace("T", " ");
			content.setStartTimef3(sdf.parse(startTimef3));
		}
		if (dataMap.get("endTimeb3") != null){
			String endTimeb3 = dataMap.get("endTimeb3");
			endTimeb3 = endTimeb3.replace("T", " ");
			content.setEndTimeb3(sdf.parse(endTimeb3));
		}
		if (dataMap.get("endTimef3") != null){
			String endTimef3 = dataMap.get("endTimef3");
			endTimef3 = endTimef3.replace("T", " ");
			content.setEndTimef3(sdf.parse(endTimef3));
		}
		content.setDiscription(dataMap.get("discription"));
		content.setOutHour(Double.valueOf(dataMap.get("outHour")));
		content.setDelayedModulus(Double.valueOf(dataMap.get("delayedModulus")));
		content.setPiece(Double.valueOf(dataMap.get("piece")));
		content.setOvertimeLimit(Double.valueOf(dataMap.get("overtimeLimit")));
		return content;
	}

    @Override
    public HSSFWorkbook exportInfos() {
        String[] cellname={
                "序号","内容","类别","出工","岗位","出勤","中","夜","年","事","病","旷","待","伤",
                "婚","丧","探","产","弹","大班","小班","大夜","小夜","驻外","其他","加班系数","节加系数",
                "上班时间段1起","上班时间段1止","下班时间段1起","下班时间段1止","上班时间段2起","上班时间段2止",
                "下班时间段2起","下班时间段2止","上班时间段3起","上班时间段3止","下班时间段3起","下班时间段3止","说明"
                };
        HSSFWorkbook hwb = new HSSFWorkbook();
        HSSFSheet sheet = hwb.createSheet("考勤内容信息");
        HSSFRow row = sheet.createRow(0);
        HSSFCell cell;
        HSSFCellStyle stycle = hwb.createCellStyle();
        stycle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
        for (int i = 0; i < cellname.length; i++) {
            cell = row.createCell(i);
            cell.setCellValue(cellname[i]);
            cell.setCellStyle(stycle);
            sheet.setColumnWidth((short) i, cellname[i].getBytes().length * 600);
        }
        //查询考勤内容信息
        String userId = toolUtil.getUserId();
        List<Map<String, String>> list = contentDao.getAllInfoList(userId);
        if (list != null) {
            for (int i = 0; i < list.size(); i++) {
                Map<String, String> info = list.get(i);
                row = sheet.createRow(i + 1);
                row.createCell(0).setCellValue(i+1+"");
                if(info.get("content") != null && !"null".equals(info.get("content"))){ 
                    row.createCell(1).setCellValue(info.get("content")); 
                }
                if(info.get("contentType") != null && !"null".equals(info.get("contentType"))){ 
                    row.createCell(2).setCellValue(info.get("contentType")); 
                }
                if(info.get("outWork") != null && !"null".equals(info.get("outWork"))){ 
                    row.createCell(3).setCellValue(info.get("outWork")); 
                }
                if(info.get("post") != null && !"null".equals(info.get("post"))){ 
                    row.createCell(4).setCellValue(info.get("post")); 
                }
                if(info.get("outDuty") != null && !"null".equals(info.get("outDuty"))){ 
                    row.createCell(5).setCellValue(info.get("outDuty")); 
                }
                if(info.get("centre") != null && !"null".equals(info.get("centre"))){ 
                    row.createCell(6).setCellValue(info.get("centre")); 
                }
                if(info.get("night") != null && !"null".equals(info.get("night"))){ 
                    row.createCell(7).setCellValue(info.get("night")); 
                }
                if(info.get("year") != null && !"null".equals(info.get("year"))){ 
                    row.createCell(8).setCellValue(info.get("year")); 
                }
                if(info.get("thing") != null && !"null".equals(info.get("thing"))){ 
                    row.createCell(9).setCellValue(info.get("thing")); 
                }
                if(info.get("disease") != null && !"null".equals(info.get("disease"))){ 
                    row.createCell(10).setCellValue(info.get("disease")); 
                }
                if(info.get("free") != null && !"null".equals(info.get("free"))){ 
                    row.createCell(11).setCellValue(info.get("free")); 
                }
                if(info.get("stay") != null && !"null".equals(info.get("stay"))){ 
                    row.createCell(12).setCellValue(info.get("stay")); 
                }
                if(info.get("injury") != null && !"null".equals(info.get("injury"))){ 
                    row.createCell(13).setCellValue(info.get("injury")); 
                }
                if(info.get("marry") != null && !"null".equals(info.get("marry"))){ 
                    row.createCell(14).setCellValue(info.get("marry")); 
                }
                if(info.get("lost") != null && !"null".equals(info.get("lost"))){ 
                    row.createCell(15).setCellValue(info.get("lost")); 
                }
                if(info.get("explore") != null && !"null".equals(info.get("explore"))){ 
                    row.createCell(16).setCellValue(info.get("explore")); 
                }
                if(info.get("give") != null && !"null".equals(info.get("give"))){ 
                    row.createCell(17).setCellValue(info.get("give")); 
                }
                if(info.get("flip") != null && !"null".equals(info.get("flip"))){ 
                    row.createCell(18).setCellValue(info.get("flip")); 
                }
                if(info.get("bigClass") != null && !"null".equals(info.get("bigClass"))){ 
                    row.createCell(19).setCellValue(info.get("bigClass")); 
                }
                if(info.get("smallClass") != null && !"null".equals(info.get("smallClass"))){ 
                    row.createCell(20).setCellValue(info.get("smallClass")); 
                }
                if(info.get("bigNight") != null && !"null".equals(info.get("bigNight"))){ 
                    row.createCell(21).setCellValue(info.get("bigNight")); 
                }
                if(info.get("smallNight") != null && !"null".equals(info.get("smallNight"))){ 
                    row.createCell(22).setCellValue(info.get("smallNight")); 
                }
                if(info.get("overseas") != null && !"null".equals(info.get("overseas"))){ 
                    row.createCell(23).setCellValue(info.get("overseas")); 
                }
                if(info.get("other") != null && !"null".equals(info.get("other"))){ 
                    row.createCell(24).setCellValue(info.get("other")); 
                }
                if(info.get("overtimeModulus") != null && !"null".equals(info.get("overtimeModulus"))){ 
                    row.createCell(25).setCellValue(info.get("overtimeModulus")); 
                }
                if(info.get("vacationModulus") != null && !"null".equals(info.get("vacationModulus"))){ 
                    row.createCell(26).setCellValue(info.get("vacationModulus")); 
                }
                row.createCell(27).setCellValue(info.get("startTimeb1")); 
                row.createCell(28).setCellValue(info.get("startTimef1")); 
                row.createCell(29).setCellValue(info.get("endTimeb1")); 
                row.createCell(30).setCellValue(info.get("endTimef1")); 
                row.createCell(31).setCellValue(info.get("startTimeb2")); 
                row.createCell(32).setCellValue(info.get("startTimef2")); 
                row.createCell(33).setCellValue(info.get("endTimeb2")); 
                row.createCell(34).setCellValue(info.get("endTimef2"));  
                row.createCell(35).setCellValue(info.get("startTimeb3")); 
                row.createCell(36).setCellValue(info.get("startTimef3")); 
                row.createCell(37).setCellValue(info.get("endTimeb3")); 
                row.createCell(38).setCellValue(info.get("endTimef3")); 
                if(info.get("discription") != null && !"null".equals(info.get("discription"))){ 
                    row.createCell(39).setCellValue(info.get("discription")); 
                }
            }
        }
        return hwb;
    }

	@Override
	public List<Map<String, String>> getContentList() {
		String userId = toolUtil.getUserId();
		//获得考勤内容下拉
		List<Map<String, String>> contentList = contentDao.getContentList(userId);
		return contentList;
	}

	@Override
	public CkContent getValidateContent(String contentName) {
		String userId = toolUtil.getUserId();
		return contentDao.getValidateContent(userId, contentName);
	}
}
