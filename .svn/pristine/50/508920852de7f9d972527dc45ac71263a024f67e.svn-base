package com.lingnet.hcm.service.impl.salary;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lingnet.common.service.impl.BaseServiceImpl;
import com.lingnet.hcm.dao.salary.SalaryInsuranceDao;
import com.lingnet.hcm.entity.person.BasicInformation;
import com.lingnet.hcm.entity.salary.InsuranceItems;
import com.lingnet.hcm.entity.salary.InsuranceMiddle;
import com.lingnet.hcm.entity.salary.SalaryInsurance;
import com.lingnet.hcm.service.salary.InsuranceItemsService;
import com.lingnet.hcm.service.salary.InsuranceMiddleService;
import com.lingnet.hcm.service.salary.SalaryInsuranceService;
import com.lingnet.util.ExcelUtil;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;
import com.lingnet.util.ToolUtil;

/**
 * 缴费标准表
 * @ClassName: SalaryInsuranceServiceImpl 
 * @Description: 缴费标准表 
 * @author zhanghj
 * @date 2017年4月19日 上午10:27:46 
 *
 */
@Service("salaryInsuranceService")
public class SalaryInsuranceServiceImpl extends BaseServiceImpl<SalaryInsurance, String>
              implements SalaryInsuranceService {

    @Resource(name="insuranceItemsService")
    private InsuranceItemsService insuranceItemsService;
    @Resource(name="insuranceMiddleService")
    private InsuranceMiddleService insuranceMiddleService;
    @Resource(name="salaryInsuranceDao")
    private SalaryInsuranceDao salaryInsuranceDao;

    @Override
    public Map<String, Object> getPaymentInsuranceListData(String depId, String searchData, Pager pager) {
        Conjunction and = Restrictions.conjunction();
        if (!StringUtils.isBlank(depId)) {
            and.add(Restrictions.eq("companyId", depId));
        }
        pager = findPager(SalaryInsurance.class, pager, and, Restrictions.eq("isDelete", 0));
        List<?> list = pager.getResult();
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("data", list);
        map.put("total", pager.getTotalCount());

        return map;
    }

    @Override
    public String saveOrUpdate(String formdata) {
        SalaryInsurance insurance = JsonUtil.toObject(formdata, SalaryInsurance.class);
        if (insurance == null) {
            return "数据不能为空";
        }

        // 新增
        if (StringUtils.isBlank(insurance.getId())) {
            // 查询是否存在相同的福利项目
            SalaryInsurance ins = get(SalaryInsurance.class,
                    Restrictions.eq("name", insurance.getName()),
                    Restrictions.eq("isDelete", 0),
                    Restrictions.eq("companyId", insurance.getCompanyId()));
            if (ins != null) {
                return "存在相同的缴费标准";
            }
            insurance.setIsDelete(0);
            String id = save(insurance);
            if (StringUtils.isBlank(id)) {
                return "保存失败";
            }
        } else {
            SalaryInsurance insuranceNew = get(SalaryInsurance.class,
                    Restrictions.eq("id", insurance.getId()), Restrictions.eq("isDelete", 0));
            if (insuranceNew != null) {
                // 查询是否存在相同的福利项目
                SalaryInsurance ins = get(SalaryInsurance.class,
                        Restrictions.ne("id", insurance.getId()),
                        Restrictions.eq("name", insurance.getName()),
                        Restrictions.eq("isDelete", 0),
                        Restrictions.eq("companyId", insurance.getCompanyId()));
                if (ins != null) {
                    return "存在相同的缴费标准";
                }
                insuranceNew.copyFrom(insurance);
                update(insuranceNew);
            } else {
                return "当前缴费标准不存在";
            }
        }

        return "success";
    }

    @Override
    public String remove(String ids) {
        String[] idArray = ids.split(",");
        for (int i = 0,l=idArray.length; i < l; i++) {
            SalaryInsurance insurance = get(SalaryInsurance.class,
                    Restrictions.eq("id", idArray[i]), Restrictions.eq("isDelete", 0));
            if (insurance != null) {
                insurance.setIsDelete(1);
                update(insurance);
            }
        }

        return "success";
    }

    @Override
    public Map<String, Object> getInsuranceItemsListData(String depId, String searchData, Pager pager) {
        return salaryInsuranceDao.getInsuranceItemsListData(searchData, pager);
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String saveOrUpdateToInsurance(String formdata, String griddata) throws Exception {
        List<Map<String, String>> staffList = JsonUtil.getMapList(formdata);
        List<Map<String, String>> list = JsonUtil.getMapList(griddata);
        DecimalFormat df = new DecimalFormat();
        for (int i = 0, l = staffList.size(); i < l; i++) {
            Map<String, String> staffMap = staffList.get(i);
            BasicInformation info = get(BasicInformation.class, Restrictions.eq("id", staffMap.get("id")), Restrictions.eq("isDelete", 0));
            if (info == null) {
                throw new Exception("第"+(i+1)+"个选中的人不存在，已经被删除");
            }
            // 保存中间表
            InsuranceMiddle middle = new InsuranceMiddle();
            middle.setStaffId(staffMap.get("id"));
            middle.setIsDaijiao(Integer.valueOf(staffMap.get("isDaiJiao").toString()));
            middle.setIsDelete(0);
            String staffResult = insuranceMiddleService.save(middle);
            if (StringUtils.isBlank(staffResult)) {
                throw new Exception("发生异常，保存失败");
            }
            for (int j = 0, n = list.size(); j < n; j++) {
                Map<String, String> map = list.get(j);
                InsuranceItems items = JsonUtil.toObject(JsonUtil.Encode(map), InsuranceItems.class);
                items.setInsuranceMiddleId(staffResult);
                items.setIsDelete(0);
                items.setIsEnd(0);

                // 计算缴纳费用
                Double bseCom = Double.valueOf(items.getBaseCompany()) * Double.valueOf(map.get("biCompany")) * 0.01;
                Double bsePer = Double.valueOf(items.getBasePersonal()) * Double.valueOf(map.get("biPersonal")) * 0.01;
                if (bseCom > Double.valueOf(map.get("high"))) {// 公司缴纳上限比较
                    bseCom = Double.valueOf(map.get("high"));
                } else if (bseCom < Double.valueOf(map.get("low"))) {// 公司缴纳下限比较
                    bseCom = Double.valueOf(map.get("low"));
                }
                if (bsePer > Double.valueOf(map.get("high"))) {// 员工缴纳上限比较
                    bsePer = Double.valueOf(map.get("high"));
                } else if (bsePer < Double.valueOf(map.get("low"))) {// 员工缴纳下限比较
                    bsePer = Double.valueOf(map.get("low"));
                }
                items.setPaymentCompany(ceilMath(df, Integer.valueOf(map.get("payCarryRule")), map.get("xs"), bseCom));
                items.setPaymentPersonal(ceilMath(df, Integer.valueOf(map.get("payCarryRule")), map.get("xs"), bsePer));
                String result = insuranceItemsService.save(items);
                if (StringUtils.isBlank(result)) {
                    throw new Exception("发生异常，保存失败");
                }
            }
        }

        return "success";
    }

    @Override
    public Map<String, Object> getNoInsuranceOfStaffListData(String depId, String searchData, Pager pager) {
        return salaryInsuranceDao.getNoInsuranceOfStaffListData(depId, searchData, pager);
    }

    @Override
    public List<Map<String, Object>> getNoChoseStaffListData(String ids) {
        return salaryInsuranceDao.getNoChoseStaffListData(ids);
    }

    @Override
    public List<Map<String, Object>> getNeedJoinInsuranceItemsData(String ids) {
        return salaryInsuranceDao.getNeedJoinInsuranceItemsData(ids);
    }

    @Override
    public List<Map<String, Object>> getChoseStaffInsurances(String id) {
        return salaryInsuranceDao.getChoseStaffInsurances(id);
    }

    @Override
    public String updateStopInsurance(String id, String griddata) throws Exception {
        List<Map<String, String>> list = JsonUtil.getMapList(griddata);
        for (int i = 0, l = list.size(); i < l; i++) {
            Map<String, String> map = list.get(i);
            InsuranceItems items = get(InsuranceItems.class,
                    Restrictions.eq("id", map.get("id")), Restrictions.eq("isDelete", 0));
            if (items == null) {
                throw new Exception("福利项目 " + map.get("name")+ "不存在，已经被删除");
            }
            items.setIsEnd(1);
            items.setEndYear(Integer.valueOf(map.get("endYear")));
            items.setEndMonth(Integer.valueOf(map.get("endMonth")));
            items.setEndNote(map.get("endNote"));
            insuranceItemsService.update(items);
        }

        return "success";
    }

    @Override
    public Map<String, Object> getEmployeeBaseInfo(String id) {
        return salaryInsuranceDao.getEmployeeBaseInfo(id);
    }

    @Override
    public List<Map<String, Object>> getStaffCanBaoInfo(String id) {
        return salaryInsuranceDao.getStaffCanBaoInfo(id);
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String updateToJfJs(String id, String griddata) throws Exception {
        List<Map<String, String>> list = JsonUtil.getMapList(griddata);
        for (int j = 0, n = list.size(); j < n; j++) {
            Map<String, String> map = list.get(j);
            InsuranceItems items = get(InsuranceItems.class, Restrictions.eq("id", map.get("id")), Restrictions.eq("isDelete", 0));
            if (items == null) {
                throw new Exception("第"+(j+1)+"个福利项目不存在");
            }
            items.setBaseCompany(map.get("baseCompany"));
            items.setBasePersonal(map.get("basePersonal"));
            insuranceItemsService.update(items);
        }

        return "success";
    }

    @Override
    public String ceilMath(DecimalFormat df, int rule, String xs, Double preValue) {
        String changeValue = "";
        switch (rule) {
        case 1:// 四舍五入到精度
            // 小数位数
            if (Integer.valueOf(xs) == 0) {
                df.applyPattern("0");
            } else {
                df.applyPattern("0."+String.format("%0"+ xs +"d%n", 0));
            }
            changeValue = df.format(preValue);
            break;
        case 2:// 进位到精度
            BigDecimal bigDecimal = new BigDecimal(preValue);
            BigDecimal bd = bigDecimal.setScale(Integer.valueOf(xs), BigDecimal.ROUND_UP);
            changeValue = String.valueOf(bd.doubleValue());
            break;
        case 3:// 舍位到精度
            bigDecimal = new BigDecimal(preValue);
            bd = bigDecimal.setScale(Integer.valueOf(xs), BigDecimal.ROUND_DOWN);
            changeValue = String.valueOf(bd.doubleValue());
            break;
        case 4:// 见分进角再四舍五入到元
            bigDecimal = new BigDecimal(preValue);
            bd = bigDecimal.setScale(1, BigDecimal.ROUND_UP);
            df.applyPattern("0");
            changeValue = df.format(bd.doubleValue());
            break;
        case 5:// 四舍五入到角再进位到元
            bigDecimal = new BigDecimal(Double.valueOf(df.format(preValue)));
            bd = bigDecimal.setScale(0, BigDecimal.ROUND_UP);
            changeValue = String.valueOf(bd.doubleValue());
            break;
        default:
            changeValue = "0";
            break;
        }

        return changeValue.trim();
    }

    @Override
    public Map<String, Object> getSlaryReportListData(String searchData, Pager pager) {
        return salaryInsuranceDao.getSlaryReportListData(searchData, pager);
    }

    @Override
    public Map<String, Object> getOffBankListData(String searchData, Pager pager) {
        return salaryInsuranceDao.getOffBankListData(searchData, pager);
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public void export(String searchData) {
        try {
            searchData = URLDecoder.decode(searchData, "utf-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String sql = salaryInsuranceDao.getSlaryReportSql(searchData);
        List<?> list = findBySql(sql);

        Map<String, String> mapData = JsonUtil.parseProperties(searchData);
        String[] itemNameIds = null;
        String[] itemNames = null;
        if (mapData != null) {
            if (!StringUtils.isBlank(mapData.get("salaryItem"))) {
                itemNameIds = mapData.get("salaryItem").split(",");
                itemNames = mapData.get("itemName").split(",");
            }
        }
        ArrayList<ArrayList> tableData = new ArrayList<ArrayList>();
        for (int i = 0; i < list.size(); i++) {
            ArrayList rowList=new ArrayList();
            Object[] obj = (Object[]) list.get(i);
            rowList.add(i+1);//序号
            rowList.add(obj[2]);// 工号
            rowList.add(obj[3]);// 姓名
            rowList.add(obj[9]);// 公司
            rowList.add(obj[10]);// 部门
            rowList.add(obj[11]);// 薪酬期间
            Object objItems = obj[4];
            Object objCharges = obj[6];
            if (itemNameIds != null) {
                String[] nItems = null;
                String[] charges = null;
                if (objItems == null || objCharges == null) {
                    nItems = new String[0];
                    charges = new String[0];
                } else {
                    nItems = objItems.toString().split(",");
                    charges = objCharges.toString().split(",");
                }
                for (int j = 0, l=itemNameIds.length; j < l; j++) {
                    Object v = 0;
                    for (int m = 0, n =nItems.length; m < n; m++) {
                        if (itemNameIds[j].equals(nItems[m])) {
                            v = charges[m];
                            break;
                        }
                    }
                    rowList.add(v);// 薪资项目对应的值
                }
            }
            tableData.add(rowList);
        }

        //表格标题
        String[] tableCaption ={"序号","工号","姓名","公司","部门","薪酬期间"};
        if (list.size() > 0) {
            int len1 = tableCaption.length;
            if (itemNames != null) {
                int len2 = itemNames.length;
                
                // 扩容第一个数组
                tableCaption = Arrays.copyOf(tableCaption, len1 + len2);
                System.arraycopy(itemNames, 0, tableCaption, len1, len2);
            }
        }

        //表格脚部分
        String dcr=ToolUtil.userName();
        Date dcrq=new Date();
        ArrayList footData=new ArrayList();
        footData.add("导出人： "+ ExcelUtil.toString(dcr));
        footData.add("导出日期： "+ ExcelUtil.toString(dcrq));
        ExcelUtil.export("工资报表", null, tableCaption, tableData, footData);
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public void exportForBank(String searchData) {
        try {
            searchData = URLDecoder.decode(searchData, "utf-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        String sql = salaryInsuranceDao.getOffBankSql(searchData);
        List<?> list = findBySql(sql);

        Map<String, String> mapData = JsonUtil.parseProperties(searchData);
        String[] itemNameIds = null;
        String[] itemNames = null;
        if (mapData != null) {
            if (!StringUtils.isBlank(mapData.get("salaryItem"))) {
                itemNameIds = mapData.get("salaryItem").split(",");
                itemNames = mapData.get("itemName").split(",");
            }
        }
        ArrayList<ArrayList> tableData = new ArrayList<ArrayList>();
        for (int i = 0; i < list.size(); i++) {
            ArrayList rowList=new ArrayList();
            Object[] obj = (Object[]) list.get(i);
            rowList.add(i+1);//序号
            rowList.add(obj[2]);// 工号
            rowList.add(obj[3]);// 姓名
            rowList.add(obj[12]);// 身份证号
            rowList.add(obj[11]);// 薪酬期间
            rowList.add(obj[9]);// 公司
            rowList.add(obj[10]);// 部门
            rowList.add(obj[13]);// 金融机构
            rowList.add(obj[15]);// 账户
            rowList.add(obj[16]);// 用户名
            Object objItems = obj[4];
            Object objCharges = obj[6];
            if (itemNameIds != null) {
                String[] nItems = null;
                String[] charges = null;
                if (objItems == null || objCharges == null) {
                    nItems = new String[0];
                    charges = new String[0];
                } else {
                    nItems = objItems.toString().split(",");
                    charges = objCharges.toString().split(",");
                }
                for (int j = 0, l=itemNameIds.length; j < l; j++) {
                    Object v = 0;
                    for (int m = 0, n =nItems.length; m < n; m++) {
                        if (itemNameIds[j].equals(nItems[m])) {
                            v = charges[m];
                            break;
                        }
                    }
                    rowList.add(v);// 薪资项目对应的值
                }
            }
            tableData.add(rowList);
        }

        //表格标题
        String[] tableCaption ={"序号","工号","姓名","身份证号","薪酬期间","公司","部门","金融机构","账户","用户名"};
        if (list.size() > 0) {
            int len1 = tableCaption.length;
            if (itemNames != null) {
                int len2 = itemNames.length;
                
                // 扩容第一个数组
                tableCaption = Arrays.copyOf(tableCaption, len1 + len2);
                System.arraycopy(itemNames, 0, tableCaption, len1, len2);
            }
        }

        //表格脚部分
        String dcr=ToolUtil.userName();
        Date dcrq=new Date();
        ArrayList footData=new ArrayList();
        footData.add("导出人： "+ ExcelUtil.toString(dcr));
        footData.add("导出日期： "+ ExcelUtil.toString(dcrq));
        ExcelUtil.export("报盘文件", null, tableCaption, tableData, footData);
    }

    @Override
    public Map<String, Object> getInsuranceStaffListData(String searchData, Pager pager) {
        return salaryInsuranceDao.getInsuranceStaffListData(searchData, pager);
    }

    @Override
    public List<Map<String, Object>> getCurCompanyInsurance(String depId, String effectiveYear, String effectiveMonth) {
        return salaryInsuranceDao.getCurCompanyInsurance(depId, effectiveYear, effectiveMonth);
    }

}
