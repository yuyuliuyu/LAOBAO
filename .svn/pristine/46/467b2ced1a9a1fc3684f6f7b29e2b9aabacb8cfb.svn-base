package com.lingnet.hcm.dao.impl.salary;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.SQLQuery;
import org.hibernate.criterion.CriteriaSpecification;
import org.springframework.stereotype.Repository;

import com.lingnet.common.dao.impl.BaseDaoImplInit;
import com.lingnet.hcm.dao.salary.SalaryTotalAmountDao;
import com.lingnet.hcm.entity.salary.SalaryTotalAmount;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;

/**
 * 总量
 * @ClassName: SalaryTotalAmountDaoImpl 
 * @Description: TODO 
 * @author zhanghj
 * @date 2017年5月19日 上午7:57:22 
 *
 */
@Repository("salaryTotalAmountDao")
public class SalaryTotalAmountDaoImpl extends BaseDaoImplInit<SalaryTotalAmount, String> implements SalaryTotalAmountDao {

    @Override
    public Map<String, Object> getAmountListData(String searchData, Pager pager) {
        StringBuilder sql = new StringBuilder();
        sql.append("   SELECT                              ");
        sql.append("     WM_CONCAT(PERIODDATA.ID) ID, PERIODDATA.NAME PAYPERIOD         ");
        sql.append("   FROM XC_SALARY_ASSIGNATION SA       ");
        sql.append("   LEFT JOIN XC_PERIODDATA PERIODDATA  ");
        sql.append("   ON SA.SALARY_PERIOD = PERIODDATA.ID ");
        sql.append("   WHERE SA.IS_DELETE  = 0             ");

        Map<String, String> mapData = JsonUtil.parseProperties(searchData);
        if (mapData != null) {
            // 薪酬期间
            if (!StringUtils.isBlank(mapData.get("payPeriod"))) {
                sql.append("   AND PERIODDATA.NAME LIKE '%"+mapData.get("payPeriod").trim()+"%'                                        ");
            }
        }
        sql.append("   GROUP BY PERIODDATA.NAME            ");
        sql.append("   ORDER BY PERIODDATA.NAME DESC       ");

        pager  = findPagerBySql(pager, sql.toString());
        List<?> list = pager.getResult();
        List<HashMap<String, Object>> dataList = new ArrayList<HashMap<String, Object>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", obj[0]);
            map.put("payPeriod", obj[1]);
            dataList.add(map);
        }
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());

        return map;
    }

    @SuppressWarnings("unchecked")
    @Override
    public Map<String, Object> getAmountForPeriodListData(String period, Pager pager) {
        StringBuilder sql = new StringBuilder();
//        sql.append("   SELECT TT.ID,                                                    ");
//        sql.append("     MIN(TT.COMPANY_ID) COMPANY_ID,                                 ");
//        sql.append("     MIN(TT.COMPANY) COMPANY,                                       ");
//        sql.append("     MIN(TT.PEOPLECOUNT) PEOPLECOUNT,                               ");
//        sql.append("     MIN(TT.LAST_MONTH_AMOUNT) LAST_MONTH_AMOUNT,                   ");
//        sql.append("     MIN(TT.BYJXLDKH) BYJXLDKH,                                     ");
//        sql.append("     MIN(TT.SPECIAL_REWARD) SPECIAL_REWARD,                         ");
//        sql.append("     MIN(TT.OTHER_REWARD) OTHER_REWARD,                             ");
//        sql.append("     MIN(TT.REWARD_TOTAL) REWARD_TOTAL,                             ");
//        sql.append("     MIN(TT.BYKFPZL) BYKFPZL,                                       ");
//        sql.append("     MIN(TT.CUR_MONTH_AMOUNT) CUR_MONTH_AMOUNT,                     ");
//        sql.append("     MIN(TT.NOTE) NOTE,                                             ");
//        sql.append("     WM_CONCAT(TT.ITEMID) ITEMID,                                   ");
//        sql.append("     WM_CONCAT(TT.STATIC_VALUE) STATIC_VALUE,                       ");
//        sql.append("     WM_CONCAT(TT.ACTUAL_ITEMID) ACTUAL_ITEMID,                     ");
//        sql.append("     WM_CONCAT(TT.NEED_AMOUNT) NEED_AMOUNT                          ");
//        sql.append("   FROM (SELECT STA.ID,                                             ");
//        sql.append("       MIN(STA.COMPANY_ID) COMPANY_ID,                             ");
//        sql.append("       MIN(BRANCH.FZX) COMPANY,                                     ");
//        sql.append("       COUNT(ASTAFF.ID) PEOPLECOUNT,                                ");
//        sql.append("       MIN(STA.LAST_MONTH_AMOUNT) LAST_MONTH_AMOUNT,                ");
//        sql.append("       MIN(STA.BYJXLDKH) BYJXLDKH,                                  ");
//        sql.append("       MIN(STA.SPECIAL_REWARD) SPECIAL_REWARD,                      ");
//        sql.append("       MIN(STA.OTHER_REWARD) OTHER_REWARD,                          ");
//        sql.append("       MIN(STA.REWARD_TOTAL) REWARD_TOTAL,                          ");
//        sql.append("       MIN(STA.BYKFPZL) BYKFPZL,                                    ");
//        sql.append("       MIN(STA.CUR_MONTH_AMOUNT) CUR_MONTH_AMOUNT,                  ");
//        sql.append("       MIN(STA.NOTE) NOTE,                                          ");
//        sql.append("       MIN(STA.CREATEDATE) CREATEDATE,                              ");
//        sql.append("       MIN(NVL(GWAY.ITEM_ID, ' ')) ITEMID,                          ");
//        sql.append("       SUM(TO_NUMBER(NVL(SV.STATIC_VALUE, 0))) STATIC_VALUE,        ");
//        sql.append("       MIN(STA.IS_DELETE) IS_DELETE,                            ");
//        sql.append("       MIN(NVL(TT.SALARY_ITEMS_ID, ' ')) ACTUAL_ITEMID,         ");
//        sql.append("       MIN(NVL(TT.NEED_AMOUNT,0)) NEED_AMOUNT                          ");
//        sql.append("     FROM XC_SALARY_TOTAL_AMOUNT STA                                ");
//        sql.append("     LEFT JOIN BRANCH                                               ");
//        sql.append("     ON STA.COMPANY_ID = BRANCH.ID                                  ");
//        sql.append("     LEFT JOIN XC_SALARY_ASSIGNATION SA                             ");
//        sql.append("     ON STA.FP_DATE = SA.SALARY_PERIOD                              ");
//        sql.append("     LEFT JOIN XC_ASSIGNATION_STAFF ASTAFF                          ");
//        sql.append("     ON SA.ID = ASTAFF.SALARY_ASSIGNATION_ID                        ");
//        sql.append("     LEFT JOIN XC_ASSIGNATION_STAFF_SALARY ASS                      ");
//        sql.append("     ON ASTAFF.ID      = ASS.ASSIGNATION_STAFF_ID                   ");
//        sql.append("     AND ASS.IS_DELETE = 0                                          ");
//        sql.append("     LEFT JOIN XC_SALARY_RECORD SR                                  ");
//        sql.append("     ON ASTAFF.STAFF_ID = SR.STAFF_ID                               ");
//        sql.append("     AND STA.FPQX = SR.FPQX                                         ");
//        sql.append("     LEFT JOIN XC_SALARY_GROUP_WAGE SGW                             ");
//        sql.append("     ON SA.SALARY_WAGE_ID = SGW.ID                                  ");
//        sql.append("     AND SA.SALARY_GROUP_ID = SGW.SALARY_GROUP_ID                   ");
//        sql.append("     LEFT JOIN XC_GROUP_WAGE_AND_TYPE GWAY                          ");
//        sql.append("     ON SGW.ID = GWAY.WAGE_ID                                       ");
//        sql.append("     AND ASS.IBF_ID = GWAY.ITEM_ID                                  ");
//        sql.append("     AND GWAY.IS_DELETE = 0                                         ");
//        sql.append("     AND GWAY.IS_ER = 1                                             ");
//        sql.append("     LEFT JOIN XC_SALARY_VALUE SV                                   ");
//        sql.append("     ON SV.STAFF_ID = ASTAFF.STAFF_ID                               ");
//        sql.append("     AND SV.SALARY_ITEMS_ID = GWAY.ITEM_ID                          ");
//        sql.append("     LEFT JOIN (                                   ");// 实际二次分配总量
//        sql.append("        SELECT                                               ");
//        sql.append("        SAI.SALARY_ITEMS_ID,                                 ");
//        sql.append("        MIN(SAI.SALARY_ITEMS_NAME) ITEMSNAME,                ");
//        sql.append("        MIN(SAGIN.COMPANY_ID) COMPANY_ID,                    ");
//        sql.append("        SUM(TO_NUMBER(NVL(SAI.NEED_AMOUNT, 0))) NEED_AMOUNT, ");
//        sql.append("        MIN(SAGIN.FPQX) FPQX  ");
//        sql.append("        FROM XC_SALARY_AGAIN SAGIN                           ");
//        sql.append("        LEFT JOIN XC_SALARY_AGAIN_ITEMS SAI                  ");
//        sql.append("        ON SAGIN.ID = SAI.SALARY_AGAIN_ID                    ");
//        sql.append("        AND SAI.IS_DELETE = 0                                ");
//        sql.append("        WHERE SAGIN.IS_DELETE = 0                            ");
//        sql.append("        AND SAGIN.FP_DATE IN ('"+StringUtils.join(period.split(","), "','")+"')          ");
//        sql.append("        GROUP BY SAGIN.COMPANY_ID,SAI.SALARY_ITEMS_ID        ");
//        sql.append("     ) TT                                    ");
//        sql.append("     ON TT.COMPANY_ID = STA.COMPANY_ID                               ");
//        sql.append("     AND TT.SALARY_ITEMS_ID = GWAY.ITEM_ID                           ");
//        sql.append("     AND TT.FPQX = STA.FPQX                           ");
//        sql.append("     WHERE STA.FP_DATE IN ('"+StringUtils.join(period.split(","), "','")+"')                  ");

        String join = StringUtils.join(period.split(","), "','");
        sql.append("     SELECT STA.ID,                                                            ");
        sql.append("       MIN(STA.COMPANY_ID) COMPANY_ID,                                         ");
        sql.append("       MIN(BRANCH.FZX) COMPANY,                                                ");
        sql.append("       MIN(STA.PEOPLE_COUNT) PEOPLECOUNT,                                      ");
        sql.append("       MIN(STA.LAST_MONTH_AMOUNT) LAST_MONTH_AMOUNT,                           ");
        sql.append("       MIN(STA.BYJXLDKH) BYJXLDKH,                                             ");
        sql.append("       MIN(STA.SPECIAL_REWARD) SPECIAL_REWARD,                                 ");
        sql.append("       MIN(STA.OTHER_REWARD) OTHER_REWARD,                                     ");
        sql.append("       MIN(STA.REWARD_TOTAL) REWARD_TOTAL,                                     ");
        sql.append("       MIN(STA.BYKFPZL) BYKFPZL,                                               ");
        sql.append("       MIN(STA.CUR_MONTH_AMOUNT) CUR_MONTH_AMOUNT,                             ");
        sql.append("       MIN(STA.NOTE) NOTE,                                                     ");
        sql.append("       WM_CONCAT(NVL(YITEMS.ITEM_ID, ' ')) ITEMID,                             ");
        sql.append("       WM_CONCAT(TO_NUMBER(NVL(YITEMS.STATIC_VALUE, 0))) STATIC_VALUE,         ");
        sql.append("       WM_CONCAT(NVL(SAGIN.SALARY_ITEMS_ID, ' ')) ACTUAL_ITEMID,               ");
        sql.append("       WM_CONCAT(NVL(SAGIN.REPORT_AMOUNT, 0)) REPORT_AMOUNT                    ");
        sql.append("     FROM XC_SALARY_TOTAL_AMOUNT STA                                           ");
        sql.append("     LEFT JOIN BRANCH                                                          ");
        sql.append("     ON STA.COMPANY_ID = BRANCH.ID                                             ");
        sql.append("     LEFT JOIN (                                                               ");
        sql.append("         SELECT                                                                ");
        sql.append("         SA.COMPANY_ID,                                                        ");
        sql.append("         GWAY.ITEM_ID,                                                         ");
        sql.append("         SUM(NVL(SV.STATIC_VALUE, 0)) STATIC_VALUE,                            ");
        sql.append("         MIN(SA.SALARY_PERIOD) SALARY_PERIOD                                   ");
        sql.append("         FROM XC_SALARY_ASSIGNATION SA                                         ");
        sql.append("         LEFT JOIN XC_ASSIGNATION_STAFF ASTAFF                                 ");
        sql.append("         ON SA.ID = ASTAFF.SALARY_ASSIGNATION_ID                               ");
        sql.append("         AND ASTAFF.IS_DELETE = 0                                              ");
        sql.append("         LEFT JOIN XC_ASSIGNATION_STAFF_SALARY ASS                             ");
        sql.append("         ON ASTAFF.ID      = ASS.ASSIGNATION_STAFF_ID                          ");
        sql.append("         AND ASS.IS_DELETE = 0                                                 ");
        sql.append("         LEFT JOIN XC_SALARY_GROUP_WAGE SGW                                    ");
        sql.append("         ON SA.SALARY_WAGE_ID   = SGW.ID                                       ");
        sql.append("         AND SA.SALARY_GROUP_ID = SGW.SALARY_GROUP_ID                          ");
        sql.append("         LEFT JOIN XC_GROUP_WAGE_AND_TYPE GWAY                                 ");
        sql.append("         ON SGW.ID          = GWAY.WAGE_ID                                     ");
        sql.append("         AND ASS.IBF_ID     = GWAY.ITEM_ID                                     ");
        sql.append("         AND GWAY.IS_DELETE = 0                                                ");
        sql.append("         AND GWAY.IS_ER     = 1                                                ");
        sql.append("         RIGHT JOIN XC_SALARY_RECORD SR                                  ");
        sql.append("         ON ASTAFF.STAFF_ID = SR.STAFF_ID                               ");

        StringBuilder secondSqlText = new StringBuilder();
        StringBuilder sqlText = new StringBuilder();
        Map<String, String> search = JsonUtil.parseProperties(pager.getSearchData());
        String fpqx = "";
        if (search != null) {
            // 公司
            if (!StringUtils.isBlank(search.get("company"))) {
                sqlText.append("   AND BRANCH.FZX LIKE '%"+search.get("company").trim()+"%'            ");
                secondSqlText.append("   AND BRANCH.FZX LIKE '%"+search.get("company").trim()+"%'            ");
            }
            // 分配权限（基层、公司）
            if (!StringUtils.isBlank(search.get("fpqx"))) {
                fpqx = search.get("fpqx");
                secondSqlText.append("   AND SR.FPQX = "+search.get("fpqx")+"            ");
            }
        }
        sql.append("         AND SR.FPQX = "+fpqx+"                                          ");
        sql.append("         LEFT JOIN XC_SALARY_VALUE SV                                          ");
        sql.append("         ON SV.STAFF_ID = ASTAFF.STAFF_ID                                      ");
        sql.append("         AND SV.SALARY_ITEMS_ID = GWAY.ITEM_ID                                 ");
        sql.append("         WHERE SA.SALARY_PERIOD IN ('"+join+"')                                          ");
        sql.append("         AND SV.IS_DELETE       = 0                                            ");
        sql.append("         GROUP BY GWAY.ITEM_ID,SA.COMPANY_ID                                   ");
        sql.append("     ) YITEMS                                                                  ");
        sql.append("     ON YITEMS.COMPANY_ID = STA.COMPANY_ID                                     ");
        sql.append("     AND YITEMS.SALARY_PERIOD = STA.FP_DATE                                    ");
        sql.append("     LEFT JOIN                                                                 ");
        sql.append("       (SELECT SAI.SALARY_ITEMS_ID,                                            ");
        sql.append("         SAGIN.COMPANY_ID,                                                     ");
        sql.append("         SUM(NVL(SAI.REPORT_AMOUNT,0)) REPORT_AMOUNT,                          ");
        sql.append("         SAGIN.FP_DATE,                                                        ");
        sql.append("         SAGIN.FPQX                                                            ");
        sql.append("       FROM XC_SALARY_AGAIN SAGIN                                              ");
        sql.append("       LEFT JOIN XC_SALARY_AGAIN_ITEMS SAI                                     ");
        sql.append("       ON SAGIN.ID           = SAI.SALARY_AGAIN_ID                             ");
        sql.append("       AND SAI.IS_DELETE     = 0                                               ");
        sql.append("       WHERE SAGIN.IS_DELETE = 0                                               ");
        sql.append("       AND SAGIN.FPQX = "+fpqx+"                                                      ");
        sql.append("       AND SAGIN.FP_DATE IN ('"+join+"')                                                 ");
        sql.append("       GROUP BY SAGIN.COMPANY_ID,SAGIN.FP_DATE,SAGIN.FPQX,SAI.SALARY_ITEMS_ID  ");
        sql.append("       ) SAGIN ON SAGIN.COMPANY_ID = STA.COMPANY_ID                            ");
        sql.append("     AND STA.FP_DATE               = SAGIN.FP_DATE                             ");
        sql.append("     AND YITEMS.ITEM_ID = SAGIN.SALARY_ITEMS_ID                                ");
        sql.append("     WHERE STA.FP_DATE IN ('"+join+"')                                                   ");
        sql.append("     AND STA.FPQX       = "+fpqx+"                                                    ");
        sql.append("     AND STA.IS_DELETE  = 0                                                    ");
        sql.append(sqlText);
        sql.append("     GROUP BY STA.ID                                                           ");

//        
//        sql.append("     GROUP BY STA.ID) TT                      ");
//        sql.append("   WHERE TT.IS_DELETE = 0                      ");
//        sql.append("   GROUP BY TT.ID, TT.CREATEDATE            ");
//        sql.append("   ORDER BY TT.CREATEDATE ASC                       ");

        // 二次分配
        StringBuilder secondSql = new StringBuilder();
        secondSql.append("   SELECT                            ");
        secondSql.append("   ASS.IBF_ID, MIN(ASS.IBF_NAME) IBF_NAME                  ");
        secondSql.append("   FROM XC_SALARY_TOTAL_AMOUNT STA           ");
        secondSql.append("   LEFT JOIN BRANCH                          ");
        secondSql.append("   ON STA.COMPANY_ID = BRANCH.ID             ");
        secondSql.append("   LEFT JOIN XC_SALARY_ASSIGNATION SA        ");
        secondSql.append("   ON STA.FP_DATE = SA.SALARY_PERIOD         ");
        secondSql.append("   LEFT JOIN XC_ASSIGNATION_STAFF ASTAFF     ");
        secondSql.append("   ON SA.ID = ASTAFF.SALARY_ASSIGNATION_ID   ");
        secondSql.append("   LEFT JOIN XC_ASSIGNATION_STAFF_SALARY ASS ");
        secondSql.append("   ON ASTAFF.ID = ASS.ASSIGNATION_STAFF_ID   ");
        secondSql.append("   AND ASS.IS_DELETE = 0                     ");
        secondSql.append("   LEFT JOIN XC_SALARY_ITEMS SI              ");
        secondSql.append("   ON ASS.IBF_ID = SI.ID                     ");
        secondSql.append("   LEFT JOIN XC_SALARY_RECORD SR   ");
        secondSql.append("   ON ASTAFF.STAFF_ID = SR.STAFF_ID          ");
        secondSql.append("   LEFT JOIN XC_SALARY_GROUP_WAGE SGW   ");
        secondSql.append("   ON SA.SALARY_WAGE_ID = SGW.ID          ");
        secondSql.append("   AND SA.SALARY_GROUP_ID = SGW.SALARY_GROUP_ID          ");
        secondSql.append("   LEFT JOIN XC_GROUP_WAGE_AND_TYPE GWAY                          ");
        secondSql.append("   ON SGW.ID = GWAY.WAGE_ID                                       ");
        secondSql.append("   AND GWAY.IS_DELETE = 0                                         ");
        secondSql.append("   AND ASS.IBF_ID = GWAY.ITEM_ID                                  ");
        secondSql.append("   WHERE STA.FP_DATE IN ('"+StringUtils.join(period.split(","), "','")+"')          ");

        secondSql.append(secondSqlText);
        secondSql.append("   AND GWAY.IS_ER = 1                       ");
        secondSql.append("   GROUP BY ASS.IBF_ID                      ");
        secondSql.append("   ORDER BY MIN(ASS.SX) ASC                 ");

        SQLQuery summaryQuery = getSession().createSQLQuery(secondSql.toString());
        summaryQuery.setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP);
        List<Map<String, Object>> secondList = summaryQuery.list();

        pager  = findPagerBySql(pager, sql.toString());
        List<?> list = pager.getResult();
        List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("id", obj[0]);
            map.put("companyId", obj[1]);
            map.put("company", obj[2]);
            map.put("peopleCount", obj[3]);
            map.put("lastMonthAmount", obj[4]);
            map.put("byjxldkh", obj[5]);
            map.put("specialReward", obj[6]);
            map.put("otherReward", obj[7]);
            map.put("rewardTotal", obj[8]);
            map.put("bykfpzl", obj[9]);
            map.put("curMonthAmount", obj[10]);
            map.put("note", obj[11]);
            map.put("itemId", obj[12]);
            map.put("staticValue", obj[13]);
            map.put("actualItemid", obj[14]);
            map.put("needAmount", obj[15]);
            dataList.add(map);
        }

        Map<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        map.put("secondAmount", secondList);
        map.put("actualSecondAmount", secondList);

        return map;
    }

}
