package com.lingnet.hcm.service.impl.personnel;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lingnet.common.service.impl.BaseServiceImpl;
import com.lingnet.hcm.dao.check.AnnualLeaveRecordDao;
import com.lingnet.hcm.dao.personnel.ChangeDao;
import com.lingnet.hcm.dao.personnel.PersonnelDao;
import com.lingnet.hcm.dao.personnel.PtJobDao;
import com.lingnet.hcm.dao.post.DeptPositionDao;
import com.lingnet.hcm.dao.post.PostPositionDao;
import com.lingnet.hcm.entity.DeptPosition;
import com.lingnet.hcm.entity.PostPosition;
import com.lingnet.hcm.entity.check.CkAnnualLeave;
import com.lingnet.hcm.entity.person.BasicInformation;
import com.lingnet.hcm.entity.person.Change;
import com.lingnet.hcm.entity.person.PtJob;
import com.lingnet.hcm.service.personnel.PersonnelService;
import com.lingnet.hcm.service.personnel.PersonnelUploadService;
import com.lingnet.qxgl.dao.BackendDepDao;
import com.lingnet.qxgl.dao.BranchDao;
import com.lingnet.qxgl.entity.Branch;
import com.lingnet.qxgl.entity.QxDepartment;
import com.lingnet.qxgl.entity.QxRoles;
import com.lingnet.qxgl.entity.QxUser;
import com.lingnet.qxgl.entity.QxUsers;
import com.lingnet.qxgl.service.AdminService;
import com.lingnet.qxgl.service.BackendDepService;
import com.lingnet.qxgl.service.BackendRoleService;
import com.lingnet.util.ExcelUtil;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;
/**
 * 
 * @ClassName: PersonnelServiceImpl 
 * @Description: 人员信息service实现类 
 * @author zrl
 * @date 2017年3月20日 下午1:32:00 
 *
 */
@Service("personnelUploadService")
public class PersonnelUploadServiceImpl extends BaseServiceImpl<BasicInformation, String> 
	implements PersonnelUploadService{
	@Override
	public String saveImportInfos(String endSuffix, File uploadFile) throws Exception {
		// 读取数据
        List<String[]> jblist = this.readData(4, 5, endSuffix, uploadFile,"员工基本信息");
        List<String[]> fllist = this.readData(4, 5, endSuffix, uploadFile,"员工分类信息");
        List<String[]> zzlist = this.readData(4, 5, endSuffix, uploadFile,"员工组织信息");
        
        // 第一行内容
        String[] jbfirstRow = {"工号(*)", "姓名(*)", "性别(*)", "出生日期(*)", "证件号码(*)", 
        		 "开始工作日期(*)","证件类型(*)", "政治面貌", "出生地", "职务级别", "是否集团管领导干部", "籍贯", "婚姻状况", "户口所在地"};
        
        String[] flfirstRow = {"员工工号(*)", "用工日期(*)", "用工形式(*)", "开始时间", "结束时间", "主键","员工分类(*)", "劳务公司"};
       
        String[] zzfirstRow = {"主键", "部门类型", "结束时间", "职务类型", "职位类型","员工工号(*)","公司编号(*)", 
        		"部门编号(*)", "标准岗位", "具体岗位", "在职状态(*)", "员工状态(*)", "开始时间(*)", "人员流动ID", "职务级别"};
        // 单独把第一行抽取出来
        String[] jbfirstValues = jblist.get(0);
        
        String[] flfirstValues = fllist.get(0);
        
        String[] zzfirstValues = zzlist.get(0);
        
        for (int i = 0, z = jbfirstRow.length; i < z; i++) {
            if (!jbfirstRow[i].trim().equals(jbfirstValues[i].trim())) {
                return "文件导入失败：导入名单标题存在问题！<br/><font color='red'>" + jbfirstValues[i].trim() + "</font>列必须是 " + jbfirstRow[i].trim();
            }
        }
        for (int i = 0, z = flfirstRow.length; i < z; i++) {
            if (!flfirstRow[i].trim().equals(flfirstValues[i].trim())) {
                return "文件导入失败：导入名单标题存在问题！<br/><font color='red'>" + flfirstValues[i].trim() + "</font>列必须是 " + flfirstRow[i].trim();
            }
        }
        for (int i = 0, z = zzfirstRow.length; i < z; i++) {
            if (!zzfirstRow[i].trim().equals(zzfirstValues[i].trim())) {
                return "文件导入失败：导入名单标题存在问题！<br/><font color='red'>" + zzfirstValues[i].trim() + "</font>列必须是 " + zzfirstRow[i].trim();
            }
        }
        
        List<BasicInformation> importData = new ArrayList<BasicInformation>();
        
        
        // 匹配消息
        String msg = StringUtils.EMPTY;

        // 循环遍历存储《基础数据》Excel值
        for (int i = 1; i < jblist.size(); i++) {
            // 组装列
            String[] columns = new String[12];
            String[] values = jblist.get(i);
            // 判断是否整行是空行
            Boolean isEmpty= true;
            for(int q=0;q<values.length;q++){
                if (q < 12) {
                    columns[q]=values[q].trim();
                    if (!StringUtils.isBlank(columns[q])) {
                        isEmpty = false;
                    }
                } else continue;
            }
            // 存在空白行
            if (isEmpty) {
                // 文档结束
                break;
            }
            for(int k=values.length;k<12;k++){
                columns[k]="";
            }
            BasicInformation infos = new BasicInformation();// 存储人员基本信息
            
            //职工号判断
            if (!StringUtils.isBlank(columns[0])) {
                String message = checkLength(columns[0], "职工号长度不能超过10位", 10);
                if (!StringUtils.isBlank(message)) {
                    throw new Exception("文件导入失败： 第"+ (i+1) +"行，"+message);
                }
                infos.setJobNumber(columns[0]);
            } else throw new Exception("文件导入失败： 第"+ (i+1) +"行，职工号不能为空！");
            // 姓名验证
            if (!StringUtils.isBlank(columns[1])) {
                infos.setName(columns[1]);
            } else throw new Exception("文件导入失败： 第"+ (i+1) +"行，名字不能为空！");
            //性别验证
            if (!StringUtils.isBlank(columns[2])) {
                infos.setSex(Integer.parseInt(columns[2]));
            }
            // 出生日期验证
            if (!StringUtils.isBlank(columns[3])) {
            	 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
            	 Date date = sdf.parse(columns[3]); 
                 infos.setBorthDate(date);
            }
            //证件号码验证
            if (!StringUtils.isBlank(columns[4])) {
            	String message = checkLength(columns[4], "职证件号码长度不能超过18位", 18);
            	if (!StringUtils.isBlank(message)) {
                    throw new Exception("文件导入失败： 第"+ (i+1) +"行，"+message);
                }
                infos.setIdNumber(columns[4]);
            }
            // 开始工作日期验证
            if (!StringUtils.isBlank(columns[5])) {
            	 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
            	 Date date = sdf.parse(columns[5]); 
                 infos.setSetWorkDate(date);
            }
            //性证件类型
            if (!StringUtils.isBlank(columns[6])) {
                infos.setIdType(columns[6]);
            }
            //政治面貌
            if (!StringUtils.isBlank(columns[7])) {
                infos.setPoliticsStatus(columns[7]);
            }
            //出生地
            if (!StringUtils.isBlank(columns[8])) {
                infos.setBorthPlace(columns[8]);
            }
            //职务级别
            if (!StringUtils.isBlank(columns[9])) {
                infos.setJobLevel(columns[9]);
            }
            //籍贯
            if (!StringUtils.isBlank(columns[10])) {
                infos.setNativePlace(columns[10]);
            }
            //户口所在地
            if (!StringUtils.isBlank(columns[11])) {
                infos.setResidencePlace(columns[11]);
            }
            importData.add(infos);
        }
        
        // 没有导入任何人员名单
        if (importData.size() == 0) {
            throw new Exception("@基础信息导入失败：" + msg);
        }
        
     // 循环遍历存储《基础数据》Excel值
        for (int i = 1; i < jblist.size(); i++) {
            // 组装列
            String[] columns = new String[12];
            String[] values = jblist.get(i);
            // 判断是否整行是空行
            Boolean isEmpty= true;
            for(int q=0;q<values.length;q++){
                if (q < 12) {
                    columns[q]=values[q].trim();
                    if (!StringUtils.isBlank(columns[q])) {
                        isEmpty = false;
                    }
                } else continue;
            }
            // 存在空白行
            if (isEmpty) {
                // 文档结束
                break;
            }
            for(int k=values.length;k<12;k++){
                columns[k]="";
            }
            BasicInformation infos = new BasicInformation();// 存储人员基本信息
            
            //职工号判断
            if (!StringUtils.isBlank(columns[0])) {
                String message = checkLength(columns[0], "职工号长度不能超过10位", 10);
                if (!StringUtils.isBlank(message)) {
                    throw new Exception("文件导入失败： 第"+ (i+1) +"行，"+message);
                }
                infos.setJobNumber(columns[0]);
            } else throw new Exception("文件导入失败： 第"+ (i+1) +"行，职工号不能为空！");
            // 姓名验证
            if (!StringUtils.isBlank(columns[1])) {
                infos.setName(columns[1]);
            } else throw new Exception("文件导入失败： 第"+ (i+1) +"行，名字不能为空！");
            //性别验证
            if (!StringUtils.isBlank(columns[2])) {
                infos.setSex(Integer.parseInt(columns[2]));
            }
            // 出生日期验证
            if (!StringUtils.isBlank(columns[3])) {
            	 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
            	 Date date = sdf.parse(columns[3]); 
                 infos.setBorthDate(date);
            }
            //证件号码验证
            if (!StringUtils.isBlank(columns[4])) {
            	String message = checkLength(columns[4], "职证件号码长度不能超过18位", 18);
            	if (!StringUtils.isBlank(message)) {
                    throw new Exception("文件导入失败： 第"+ (i+1) +"行，"+message);
                }
                infos.setIdNumber(columns[4]);
            }
            // 开始工作日期验证
            if (!StringUtils.isBlank(columns[5])) {
            	 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
            	 Date date = sdf.parse(columns[5]); 
                 infos.setSetWorkDate(date);
            }
            //性证件类型
            if (!StringUtils.isBlank(columns[6])) {
                infos.setIdType(columns[6]);
            }
            //政治面貌
            if (!StringUtils.isBlank(columns[7])) {
                infos.setPoliticsStatus(columns[7]);
            }
            //出生地
            if (!StringUtils.isBlank(columns[8])) {
                infos.setBorthPlace(columns[8]);
            }
            //职务级别
            if (!StringUtils.isBlank(columns[9])) {
                infos.setJobLevel(columns[9]);
            }
            //籍贯
            if (!StringUtils.isBlank(columns[10])) {
                infos.setNativePlace(columns[10]);
            }
            //户口所在地
            if (!StringUtils.isBlank(columns[11])) {
                infos.setResidencePlace(columns[11]);
            }
            importData.add(infos);
        }
        
        // 没有导入任何人员名单
        if (importData.size() == 0) {
            throw new Exception("@基础信息导入失败：" + msg);
        }
        
        return "success";
	}
	/**
     * @Title: 检测列的长度 
     * @param column
     * @param msg
     * @param length
     * @return 
     * String 
     * @author zhanghj
     * @since 2016年12月6日 V 1.0
     */
    private String checkLength(Object column, String msg, int length) {
        if (null != column) {
            if (column.toString().length() > length) return msg;
            else return "";
        } else return "";
    }
	
	 /**
     * @Title: 读取Excel文件内容 
     * @param fromLine 起始行数（从1开始）
     * @param netFilePath 文件网络地址
     * @param is
     * @return
     * @throws Exception 
     * List<String[]> 
     * @author zhanghj
     * @since 2016-8-30 V 1.0
     */
    public static List<String[]> readData(int fromLine, int toLine, String endSuffix, File uploafFile,String sheetName) throws Exception {
        // 创建对Excel工作簿文件的引用
        // 项目下面的路径
        // 根据文件后缀判断是xls还是xlsx
        Workbook wookbook = createWorkBook(endSuffix, new FileInputStream(uploafFile));
        if (null == wookbook) {
            throw new Exception("导入文件必须是以xls或者xlsx结尾");
        }

        // 在Excel文档中，第一张工作表的缺省索引是0
        Sheet sheet = wookbook.getSheet(sheetName);
        if(sheet==null){
            throw new Exception("Excel上传内容页名称有误，请根据模板名称来！");
        }
        // 获取到Excel文件中的所有行数（物理行数，不包括空行、隔行）
        int rows = sheet.getPhysicalNumberOfRows();
        // 得到起始行
        int start = fromLine-1;
        int end = rows-1;// 结束行比excel行数少一行，修改的话，改成 toLine 参数
        // 判断起始行与结束行
        if (start > end) {
            throw new Exception("起始行数不能大于结束行数！");
        }
        List<String[]> list = new ArrayList<String[]>();
        if (end <= rows-1) {
            // 循环遍历
            for (int i = start; i <= end; i++) {
                // 读取左上端单元格
                Row row = sheet.getRow(i);
                // 行不为空
                if (row != null) {
                    // 获取到Excel文件中的所有的列（比最后一列列标大1）
                    int cells = row.getLastCellNum();
                    if(cells==-1){
                        throw new Exception("模板错误，请选择正确的模板进行上传！");
                    }
                    String value = "";
                    // 遍历列
                    String[] values = new String[cells];
                    for (int j = 0; j < cells; j++) {
                        // 获取到列的值
                        Cell cell = row.getCell(j);
                        if (cell != null) {
                            // 判断单元格样式
                            switch (cell.getCellType()) {
                            case HSSFCell.CELL_TYPE_FORMULA:// 公式
                                value = new DecimalFormat("0.####").format(cell.getNumericCellValue());
                                break;
                            case HSSFCell.CELL_TYPE_NUMERIC:// 数值类型
                                if (HSSFDateUtil.isCellDateFormatted(cell)) {
                                    Date date = cell.getDateCellValue();
                                    if (date != null) {
                                        value = new SimpleDateFormat("yyyy-MM-dd").format(date);
                                    } else {
                                        value = "";
                                    }
                                } else {
                                    value = new DecimalFormat("0.####").format(cell.getNumericCellValue());
                                }
                                break;
                            case HSSFCell.CELL_TYPE_STRING:// 字符串类型
                                value = cell.getStringCellValue();
                                break;
                            default:
                                value = "";
                                break;
                            }
                        } else {
                            value = "";
                        }
                        // 把列放入数组
                        values[j] = value;
                    }

                    // 把行数据放入list
                    list.add(values);
                }
            }
        }

        return list;
    }
    
    /**
     * @Title: 判断是xls文件还是xlsx文件 
     * @param endSuffix 文件后缀
     * @param is
     * @return
     * @throws IOException 
     * Workbook 
     * @author zhanghj
     * @since 2016-8-29 V 1.0
     */
    private static Workbook createWorkBook(String endSuffix, InputStream is) throws IOException {
        //需要在盖方法中判断是xls文件还是xlsx文件
        if (endSuffix.toLowerCase().endsWith("xls")) {
            return new HSSFWorkbook(is);
        }
        if (endSuffix.toLowerCase().endsWith("xlsx")) {
            return new XSSFWorkbook(is);
        }

        return null;
    }
}
