package com.lingnet.hcm.service.impl.salary;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lingnet.common.service.impl.BaseServiceImpl;
import com.lingnet.hcm.entity.salary.SalaryGroup;
import com.lingnet.hcm.service.salary.SalaryGroupService;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;

/**
 * 薪资组
 * @ClassName: SalaryGroupServiceImpl 
 * @Description: 薪资组
 * @author zhanghj
 * @date 2017年3月21日 下午2:46:24 
 *
 */
@Service("salaryGroupService")
public class SalaryGroupServiceImpl extends BaseServiceImpl<SalaryGroup, String>
              implements SalaryGroupService {

    @Override
    public Map<String, Object> getSalaryGroupListData(String companyId,
            String searchData, Pager pager) {
        Conjunction and = Restrictions.conjunction();
        if (!StringUtils.isBlank(companyId)) {
            and.add(Restrictions.eq("companyId", companyId));
        }
        Map<String, String> map = JsonUtil.parseProperties(searchData);
        if (map != null) {
            // 薪资组名称
            if (!StringUtils.isBlank(map.get("name"))) {
                and.add(Restrictions.like("name", map.get("name"), MatchMode.ANYWHERE));
            }
            // 发薪频率
            if (!StringUtils.isBlank(map.get("salaryPeriod"))) {
                and.add(Restrictions.eq("salaryPeriod", map.get("salaryPeriod")));
            }
        }
        pager = findPagerByOrder(SalaryGroup.class, pager, Order.desc("createDate"), Restrictions.eq("isDelete", 0), and);
        HashMap<String, Object> m = new HashMap<String, Object>();
        m.put("data", pager.getResult());
        m.put("total", pager.getTotalCount());

        return m;
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String saveOrUpdate(String formdata) throws Exception {
        SalaryGroup group = JsonUtil.toObject(formdata, SalaryGroup.class);
        if (group != null) {
            String id = group.getId();
            if (StringUtils.isBlank(id)) {
                SalaryGroup groupMore = get(SalaryGroup.class, Restrictions.eq("depId", group.getDepId()),
                        Restrictions.eq("isDelete", 0), Restrictions.eq("name", group.getName()));
                if (groupMore != null) {
                    return "存在相同的薪资组";
                }
                group.setIsDelete(0);
                id = save(group);
                if (StringUtils.isBlank(id))
                    throw new Exception("保存失败");
            } else {
                SalaryGroup sit = get(SalaryGroup.class, Restrictions.eq("id", id), Restrictions.eq("isDelete", 0));
                if (sit == null) {
                    throw new Exception("该条记录不存在");
                }
                group.setIsDelete(0);
                sit.copyFrom(group);
                update(sit);
            }
        } else return "信息不能为空";

        return "success";
    }

    @Override
    public String remove(String ids) {
        String[] idArray = ids.split(",");
        for (int i = 0, l = idArray.length; i < l; i++) {
            SalaryGroup group = get(SalaryGroup.class, Restrictions.eq("id", idArray[i]), Restrictions.eq("isDelete", 0));
            if (group != null) {
                group.setIsDelete(1);
                this.update(group);
            }
        }

        return "success";
    }
}
