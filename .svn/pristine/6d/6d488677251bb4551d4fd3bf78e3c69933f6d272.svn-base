package com.lingnet.hcm.service.impl.salary;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.annotation.Resource;

import org.apache.commons.jexl2.Expression;
import org.apache.commons.jexl2.JexlContext;
import org.apache.commons.jexl2.JexlEngine;
import org.apache.commons.jexl2.MapContext;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lingnet.common.service.impl.BaseServiceImpl;
import com.lingnet.hcm.dao.salary.SalaryAssignationDao;
import com.lingnet.hcm.entity.WorkFlowChild;
import com.lingnet.hcm.entity.WorkFlowPrent;
import com.lingnet.hcm.entity.salary.AssignationRecord;
import com.lingnet.hcm.entity.salary.AssignationStaff;
import com.lingnet.hcm.entity.salary.AssignationStaffSalary;
import com.lingnet.hcm.entity.salary.SalaryAgain;
import com.lingnet.hcm.entity.salary.SalaryAssignation;
import com.lingnet.hcm.entity.salary.SalaryItems;
import com.lingnet.hcm.entity.salary.SalaryRecord;
import com.lingnet.hcm.entity.salary.SalaryTotalAmount;
import com.lingnet.hcm.entity.salary.SalaryWageMain;
import com.lingnet.hcm.entity.salary.SalaryWageSecond;
import com.lingnet.hcm.service.salary.AssignationRecordService;
import com.lingnet.hcm.service.salary.AssignationStaffSalaryService;
import com.lingnet.hcm.service.salary.AssignationStaffService;
import com.lingnet.hcm.service.salary.SalaryAssignationService;
import com.lingnet.hcm.service.salary.SalaryFormulaService;
import com.lingnet.hcm.service.salary.SalaryTotalAmountService;
import com.lingnet.hcm.service.salary.SalaryWageMainService;
import com.lingnet.hcm.service.salary.SalaryWageSecondService;
import com.lingnet.util.ExcelUtil;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.LingUtil;
import com.lingnet.util.Pager;
import com.lingnet.util.SpringUtil;
import com.lingnet.util.ToolUtil;

/**
 * 薪酬分配过程
 * @ClassName: SalaryAssignationServiceImpl 
 * @Description: 薪酬分配过程 
 * @author zhanghj
 * @date 2017年5月9日 下午5:01:51 
 *
 */
@Service("salaryAssignationService")
public class SalaryAssignationServiceImpl extends BaseServiceImpl<SalaryAssignation, String>
              implements SalaryAssignationService {

    @Resource(name="assignationStaffService")
    private AssignationStaffService assignationStaffService;
    @Resource(name="assignationStaffSalaryService")
    private AssignationStaffSalaryService assignationStaffSalaryService;
    @Resource(name="salaryFormulaService")
    private SalaryFormulaService salaryFormulaService;
    @Resource(name="salaryTotalAmountService")
    private SalaryTotalAmountService salaryTotalAmountService;
    @Resource(name="assignationRecordService")
    private AssignationRecordService assignationRecordService;
    @Resource(name="salaryWageMainService")
    private SalaryWageMainService salaryWageMainService;
    @Resource(name="salaryWageSecondService")
    private SalaryWageSecondService salaryWageSecondService;
    @Resource(name="salaryAssignationDao")
    private SalaryAssignationDao salaryAssignationDao;

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String saveOrUpdate(String formdata) throws Exception {
        SalaryAssignation assignation = JsonUtil.toObject(formdata, SalaryAssignation.class);
        Boolean add = false;

        // 分配过程ID
        String id = "";
        if (StringUtils.isBlank(assignation.getId())) {
            assignation.setIsDelete(0);

            // 判断是否存在已经发放的日期
            SalaryAssignation check  = get(SalaryAssignation.class,
                    Restrictions.eq("salaryGroupId", assignation.getSalaryGroupId()),
                    Restrictions.eq("salaryPeriod", assignation.getSalaryPeriod()),
                    Restrictions.eq("isDelete", 0));
            if (check != null) return "此薪资组对应的薪酬期间已经存在";
            assignation.setIsSp(0);
            assignation.setIsFafang(0);
            id = this.save(assignation);
            if (StringUtils.isBlank(id))
                return "保存失败";
            add = true;
        } else {
            SalaryAssignation assignationNew  = get(SalaryAssignation.class, Restrictions.eq("id", assignation.getId()), Restrictions.eq("isDelete", 0));
            if (assignationNew == null) {
                return "该分配过程不存在，已经被删除";
            }

            // 判断是否存在已经发放的日期
            SalaryAssignation check  = get(SalaryAssignation.class,
                    Restrictions.ne("id", assignation.getId()),
                    Restrictions.eq("salaryGroupId", assignation.getSalaryGroupId()),
                    Restrictions.eq("salaryPeriod", assignation.getSalaryPeriod()),
                    Restrictions.eq("isDelete", 0));
            if (check != null) return "此薪资组、薪酬期间对应的分配过程已经存在";
            assignationNew.copyFrom(assignation);
            this.update(assignationNew);
            id = assignationNew.getId();
        }

        // 发放数据
        if (add) {
            String message = saveAssignData(id, assignation.getSalaryGroupId(), assignation.getSalaryWageId());
            if (!message.equals("success")) {
                throw new Exception(message);
            }
        }

        return "success";
    }

    @Override
    public Map<String, Object> getSalaryAssignationListData(String companyId, String searchData, Pager pager) {
        return salaryAssignationDao.getSalaryAssignationListData(companyId, searchData, pager);
    }

    @Override
    public Map<String, Object> getCheckListData(String id, Pager pager) {
        return salaryAssignationDao.getCheckListData(id, pager);
    }

    @Override
    public Map<String, Object> getSalaryAssignationForAuthListData(String userName, String searchData, Pager pager) {
        return salaryAssignationDao.getSalaryAssignationForAuthListData(userName, searchData, pager);
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String remove(String ids) throws Exception {
        String[] idArray = ids.split(",");
        for (int i = 0, l = idArray.length; i < l; i++) {
            SalaryAssignation assignationNew  = get(SalaryAssignation.class, Restrictions.eq("id", idArray[i]), Restrictions.eq("isDelete", 0));
            if (assignationNew != null) {
                assignationNew.setIsDelete(1);
                update(assignationNew);
            } else {
                throw new Exception("选择的第"+(i+1)+"个分配过程不存在，已经被删除");
            }
        }

        return "success";
    }

    @Override
    public List<Map<String, Object>> getNeedAssignationData(String groupId, String wageId) {
        return salaryAssignationDao.getNeedAssignationData(groupId, wageId);
    }

    @Override
    public Map<String, Object> getAssignationForStaffData(String id, String ids, String searchData) {
        return salaryAssignationDao.getAssignationForStaffData(id, ids, searchData);
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String updateAssignationForStaffData(String id) throws Exception {
        SalaryAssignation staff = get(SalaryAssignation.class,
                Restrictions.eq("id", id),
                Restrictions.eq("isDelete", 0));
        // 判断分配过程是否存在
        if (staff == null) {
            return "该薪酬核算过程不存在";
        }

        // 首先删除相关的核算数据主表数据
        deleteByCriteria(AssignationStaff.class, Restrictions.eq("salaryAssignationId", staff.getId()));

        // 删除总量表该公司数据
        deleteByCriteria(SalaryTotalAmount.class, Restrictions.eq("companyId", staff.getCompanyId()), Restrictions.eq("fpDate", staff.getSalaryPeriod()));

        // 重新分配
        String message = saveAssignData(id, staff.getSalaryGroupId(), staff.getSalaryWageId());
        if (!message.equals("success")) {
            throw new Exception(message);
        }

        return "success";
    }

    /**
     * @Title: 分配核算过程数据
     * @param assignId
     * @param groupId
     * @param wageId
     * @return 
     * String 
     * @author zhanghj
     * @since 2017年5月10日 V 1.0
     */
    private String saveAssignData(String assignId, String groupId, String wageId) {
        List<Map<String, Object>> needStaffs = getNeedAssignationData(groupId, wageId);
        List<AssignationStaffSalary> assignationStaffSalaries = new ArrayList<AssignationStaffSalary>();
        DecimalFormat df = new DecimalFormat();
        Set<Object> dept = new HashSet<Object>();
        JexlContext jc = new MapContext();
        for (int i = 0, n = needStaffs.size(); i < n; i++) {
            Map<String, Object> staffInfo = needStaffs.get(i);
            AssignationStaff staff = new AssignationStaff();
            staff.setSalaryAssignationId(assignId);
            staff.setStaffId(staffInfo.get("id").toString());
            staff.setJobNumber(staffInfo.get("jobNumber").toString());
            staff.setStaffName(staffInfo.get("name").toString());
            staff.setCompanyId(staffInfo.get("companyId").toString());
            staff.setCompanyName(staffInfo.get("companyName").toString());
            staff.setDeptId(staffInfo.get("departId").toString());
            staff.setDeptName(staffInfo.get("deptName").toString());
            staff.setIsDelete(0);
            String assignMainId= assignationStaffService.save(staff);
            if (StringUtils.isBlank(assignMainId))
                return "发生异常，薪酬核算数据分配失败";

            // 拆分薪资项目
            Object itemsObj = staffInfo.get("itemsId");
            if (itemsObj != null) {
                String[] items = itemsObj.toString().split(",;");
                String[] itemsName = staffInfo.get("itemsName").toString().split(",;");
                String[] formulas = staffInfo.get("formula").toString().split(",;");
                String[] xss = staffInfo.get("xs").toString().split(",;");
                String[] sxs = staffInfo.get("sx").toString().split(",;");
                for (int j = 0, m = items.length; j < m; j++) {
                    AssignationStaffSalary staffSalary = new AssignationStaffSalary();
                    staffSalary.setAssignationStaffId(assignMainId);
                    staffSalary.setIbfId(items[j]);
                    staffSalary.setIbfName(itemsName[j]);
                    String v = numberAccuracy(df, xss[j], formula(formulas[j], jc));
                    staffSalary.setAssignationCharge(v);
                    staffSalary.setSx(Integer.valueOf(sxs[j]));
                    staffSalary.setIsDelete(0);
                    assignationStaffSalaries.add(staffSalary);
                }
            }
            Object departId = staffInfo.get("departId");
            if (departId != null)
                dept.add(staffInfo.get("departId"));
        }

        // 保存薪酬核算数据中间表
        if (assignationStaffSalaries.size() > 0) {
            assignationStaffSalaryService.saveBatch(assignationStaffSalaries);
        }

        // 公司、基层
        String[] fpqx = {"1", "2"};
        SalaryAssignation assignation = get(SalaryAssignation.class, Restrictions.eq("id", assignId),  Restrictions.eq("isDelete", 0));
        if (assignation != null) {
            for (String i : fpqx) {
                for (Object deptId : dept) {
                    // 查找分配权限的人数
                    Map<String, Object> fpqxPeopleCount = salaryAssignationDao.getFpqxPeopleCount(assignId, i, deptId.toString());
                    SalaryTotalAmount totalAmount = new SalaryTotalAmount();
                    totalAmount.setCompanyId(assignation.getCompanyId());
                    int peopleCount = fpqxPeopleCount.get(i) == null ? 0 : Integer.valueOf(fpqxPeopleCount.get(i).toString());
                    totalAmount.setPeopleCount(peopleCount);
                    totalAmount.setDepId(deptId.toString());
                    totalAmount.setByjxldkh("0");
                    totalAmount.setSpecialReward("0");
                    totalAmount.setOtherReward("0");
                    totalAmount.setRewardTotal("0");
                    totalAmount.setBykfpzl("0");
                    totalAmount.setFpDate(assignation.getSalaryPeriod());
                    totalAmount.setCurMonthAmount("0");
                    totalAmount.setIsDelete(0);
                    totalAmount.setFpqx(i);
                    String salaryPeriod = salaryAssignationDao.getLastMonthSalaryPeriod(assignation.getSalaryPeriod());
                    Map<String, String> map = JsonUtil.parseProperties(salaryPeriod);
                    if (map.get("success").equals("1")) {
                        // 查找上月结余
                        SalaryTotalAmount latMonth = get(SalaryTotalAmount.class,
                                Restrictions.eq("companyId", assignation.getCompanyId()),
//                            Restrictions.eq("depId", assignation.getCompanyId()),
                                Restrictions.eq("fpDate", map.get("info")),
                                Restrictions.eq("fpqx", i),
                                Restrictions.eq("isDelete", 0));
                        if (latMonth != null) {
                            totalAmount.setLastMonthAmount(latMonth.getCurMonthAmount());
                        } else {
                            totalAmount.setLastMonthAmount("0");
                        }
                        String result = salaryTotalAmountService.save(totalAmount);
                        if (StringUtils.isBlank(result))
                            return "发生异常，薪酬核算数据分配失败";
                    } else {
                        return map.get("info");
                    }
                }
            }
        } else return "此分配过程不存在，已经被删除";

        return "success";
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String saveSelectStaffData(String assignId, String selectData) throws Exception {
        SalaryAssignation assignation = get(SalaryAssignation.class, Restrictions.eq("id", assignId),  Restrictions.eq("isDelete", 0));
        if (assignation == null) {
            return "该薪酬核算过程不存在，已经被删除";
        }
        List<Map<String, String>> needStaffs = JsonUtil.getMapList(selectData);
        List<AssignationStaffSalary> assignationStaffSalaries = new ArrayList<AssignationStaffSalary>();

        // 部门存储容器
        Map<String, String> deptCounts = new HashMap<String, String>();
        for (int i = 0, n = needStaffs.size(); i < n; i++) {
            Map<String, String> staffInfo = needStaffs.get(i);
            AssignationStaff staff = new AssignationStaff();
            staff.setSalaryAssignationId(assignId);
            staff.setStaffId(staffInfo.get("id").toString());
            staff.setJobNumber(staffInfo.get("jobNumber").toString());
            staff.setStaffName(staffInfo.get("name").toString());
            staff.setCompanyId(staffInfo.get("companyId").toString());
            staff.setCompanyName(staffInfo.get("company").toString());
            staff.setDeptId(staffInfo.get("deptId").toString());
            staff.setDeptName(staffInfo.get("deptName").toString());
            staff.setIsDelete(0);
            String assignMainId= assignationStaffService.save(staff);
            if (StringUtils.isBlank(assignMainId))
                throw new Exception("发生异常，薪酬核算数据分配失败");

            // 拆分薪资项目
            Object itemsObj = staffInfo.get("itemsId");
            if (itemsObj != null) {
                String[] items = itemsObj.toString().split(",");
                String[] itemsName = staffInfo.get("itemsName").toString().split(",");
                String[] sxs = staffInfo.get("sx").toString().split(",");
                for (int j = 0, m = items.length; j < m; j++) {
                    AssignationStaffSalary staffSalary = new AssignationStaffSalary();
                    staffSalary.setAssignationStaffId(assignMainId);
                    staffSalary.setIbfId(items[j]);
                    staffSalary.setIbfName(itemsName[j]);
                    staffSalary.setAssignationCharge("0");
                    staffSalary.setSx(Integer.valueOf(sxs[j]));
                    staffSalary.setIsDelete(0);
                    assignationStaffSalaries.add(staffSalary);
                }
            }

            // 查找人员部门
            SalaryRecord record = get(SalaryRecord.class, Restrictions.eq("staffId", staff.getStaffId()));
            if (record == null) {
                throw new Exception("第"+(i+1)+"个员工不存在，已经被删除");
            }

            // 存储各部门的人员数量
            String combine = deptCounts.get(staffInfo.get("deptId"));
            Integer curCount = 1;
            if (!StringUtils.isBlank(combine)) {
                curCount = Integer.valueOf(combine.substring(0, combine.indexOf("fpqx:")));
                ++curCount;
            }
            deptCounts.put(staffInfo.get("deptId"), curCount + "fpqx:" + record.getFpqx());
        }

        // 保存薪酬核算数据中间表
        if (assignationStaffSalaries.size() > 0) {
            assignationStaffSalaryService.saveBatch(assignationStaffSalaries);

            for (Entry<String, String> entry : deptCounts.entrySet()) {
                // 拆分
                Integer peopleCount = Integer.valueOf(entry.getValue().substring(0, entry.getValue().indexOf("fpqx:")));
                String fpqx = entry.getValue().substring(entry.getValue().indexOf("fpqx:") + 5);
                SalaryTotalAmount amount = get(SalaryTotalAmount.class,
                        Restrictions.eq("companyId", assignation.getCompanyId()),
                        Restrictions.eq("depId", entry.getKey()),
                        Restrictions.eq("fpDate", assignation.getSalaryPeriod()),
                        Restrictions.eq("fpqx", fpqx),
                        Restrictions.eq("isDelete", 0));
                if (amount != null) {
                    amount.setPeopleCount(amount.getPeopleCount() + peopleCount);
                    salaryTotalAmountService.update(amount);
                }
            }
        }

        return "success";
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String removeForAssign(String ids) throws Exception {
        String[] idsArray = ids.split(",");
        List<AssignationStaff> assignationStaffSalaries = new ArrayList<AssignationStaff>();
        String assignId = "";

        // 部门存储容器
        Map<String, String> deptCounts = new HashMap<String, String>();
        for (int i = 0; i < idsArray.length; i++) {
            AssignationStaff salary = get(AssignationStaff.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (salary == null) {
                throw new Exception("第"+(i+1)+"个员工不存在，已经被删除");
            }
            salary.setIsDelete(1);
            assignationStaffSalaries.add(salary);
            assignId = salary.getSalaryAssignationId();

            // 查找人员部门
            SalaryRecord record = get(SalaryRecord.class, Restrictions.eq("staffId", salary.getStaffId()));
            if (record == null) {
                throw new Exception("第"+(i+1)+"个员工不存在，已经被删除");
            }

            // 存储各部门的人员数量
            String combine = deptCounts.get(record.getDeptname());
            Integer curCount = 1;
            if (!StringUtils.isBlank(combine)) {
                curCount = Integer.valueOf(combine.substring(0, combine.indexOf("fpqx:")));
                ++curCount;
            }
            deptCounts.put(record.getDeptname(), curCount + "fpqx:" + record.getFpqx());
        }
        assignationStaffService.saveBatch(assignationStaffSalaries);

        // 更新总量表数据
        SalaryAssignation assignation = get(SalaryAssignation.class, Restrictions.eq("id", assignId),  Restrictions.eq("isDelete", 0));
        if (assignation != null) {
            for (Entry<String, String> entry : deptCounts.entrySet()) {
                // 拆分
                Integer peopleCount = Integer.valueOf(entry.getValue().substring(0, entry.getValue().indexOf("fpqx:")));
                String fpqx = entry.getValue().substring(entry.getValue().indexOf("fpqx:") + 5);
                SalaryTotalAmount amount = get(SalaryTotalAmount.class,
                        Restrictions.eq("companyId", assignation.getCompanyId()),
                        Restrictions.eq("depId", entry.getKey()),
                        Restrictions.eq("fpDate", assignation.getSalaryPeriod()),
                        Restrictions.eq("fpqx", fpqx),
                        Restrictions.eq("isDelete", 0));
                if (amount != null) {
                    amount.setPeopleCount(amount.getPeopleCount() - peopleCount);
                    salaryTotalAmountService.update(amount);
                }
            }
        } else {
            throw new Exception("该薪酬核算过程不存在，已经被删除");
        }

        return "success";
    }

    @Override
    public String updateReCalculateStaffsItem(String assignStaffId, String assignId, String id) {
        List<Map<String, Object>> list = salaryAssignationDao.getSelectedStaffAssignData(assignStaffId, assignId, id);
        List<AssignationStaffSalary> staffSalaries = new ArrayList<AssignationStaffSalary>();
        DecimalFormat df = new DecimalFormat();
        JexlContext jc = new MapContext();
        for (int i = 0, l = list.size(); i < l; i++) {
            Map<String, Object> map = list.get(i);
            // 中间表ID
            String[] staffSalaryIds = map.get("id").toString().split(",");

            // 默认公式
            String[] formulas = map.get("formula").toString().split(",");

            for (int j = 0, m = staffSalaryIds.length; j < m; j++) {
                // 查找中间表数据
                AssignationStaffSalary staffSalary = assignationStaffSalaryService.get(AssignationStaffSalary.class,
                        Restrictions.eq("id", staffSalaryIds[j]),
                        Restrictions.eq("isDelete", 0));
                if (staffSalary != null) {
                    // 计算公式
                    Object result = formula(formulas[j], jc);
                    SalaryItems items = get(SalaryItems.class, Restrictions.eq("id", staffSalary.getIbfId()));
                    if (items != null) {
                        // 小数位数
                        staffSalary.setAssignationCharge(numberAccuracy(df, items.getNumberAccuracy(), result == null ? "0" : result.toString()));
                        staffSalaries.add(staffSalary);
                    }
                }
            }
        }

        // 更新值
        assignationStaffSalaryService.saveBatch(staffSalaries);

        return "success";
    }

    @Override
    public String updateSelectReCalculateStaffsItem(String ids, String itemID, String formula) {
        List<AssignationStaffSalary> staffSalaries = new ArrayList<AssignationStaffSalary>();
        JexlContext jc = new MapContext();
        DecimalFormat df = new DecimalFormat();
        String sql = salaryAssignationDao.getSelectReCalculateStaffsItem(ids, itemID);
        List<?> list = findBySql(sql);
        for (int i=0, l = list.size(); i < l; i++) {
            Object[] obj = (Object[]) list.get(i);
            AssignationStaffSalary staffSalary = get(AssignationStaffSalary.class,
                    Restrictions.eq("id", obj[0]),
                    Restrictions.eq("isDelete", 0));
            if (staffSalary != null) {
                jc.set("staffId", obj[1]);
                // 计算公式
                Object result = formula(formula, jc);
                result = (result == null ? "0" : result);
                // 小数位数
                staffSalary.setAssignationCharge(numberAccuracy(df, obj[2].toString(), result));
                staffSalaries.add(staffSalary);
            }
        }

        // 更新值
        if (staffSalaries.size() > 0) assignationStaffSalaryService.saveBatch(staffSalaries);

        return "success";
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String updateSelectStaffSalaryData(String griddata, String columns) throws Exception {
        List<Map<String, String>> gridSalarys = JsonUtil.getMapList(griddata);
        for (int i = 0, l = gridSalarys.size(); i < l; i++) {
            Map<String, String> map = gridSalarys.get(i);
            if ("modified".equals(map.get("_state"))) {
                AssignationStaff staff = assignationStaffService.get(AssignationStaff.class,
                        Restrictions.eq("id", map.get("id")),
                        Restrictions.eq("isDelete", 0));
                if (staff == null) {
                    throw new Exception(map.get("name") + "核算数据不存在，已经被删除");
                }
                String[] salaryId = columns.split(",");
                for (String str : salaryId) {
                    AssignationStaffSalary staffSalary = assignationStaffSalaryService.get(AssignationStaffSalary.class,
                            Restrictions.eq("assignationStaffId", staff.getId()),
                            Restrictions.eq("id", str),
                            Restrictions.eq("isDelete", 0));
                    if (staffSalary == null) {
                        throw new Exception(map.get("name") + "核算数据不存在，已经被删除");
                    }
                    String item = map.get(staffSalary.getIbfId());
                    staffSalary.setAssignationCharge(item);
                    assignationStaffSalaryService.update(staffSalary);
                }
            }
        }

        return "success";
    }

    @Override
    public List<Map<String, String>> getAllGroupWageFinancialList(String assignStaffId, String itemid) {
        return salaryAssignationDao.getAllGroupWageFinancialList(assignStaffId, itemid);
    }

    /**
     * @Title: 公式计算
     * @param cntMath
     * @return 
     * Object 
     * @author zhanghj
     * @since 2017年5月12日 V 1.0
     */
    @Override
    public Object formula(String cntMath, JexlContext jc) {
        JexlEngine jexl=new JexlEngine();  
        Expression e = jexl.createExpression("result= " + cntMath);
        jc.set("formulaService", SpringUtil.getBean("formulaService"));
        jc.set("date", new Date());
        e.evaluate(jc);

        return jc.get("result");
    }

    /**
     * @Title: 计算保留值
     * @param df
     * @param xs
     * @param value
     * @return 
     * Object 
     * @author zhanghj
     * @since 2017年5月12日 V 1.0
     */
    private String numberAccuracy(DecimalFormat df, String xs, Object value) {
        // 小数位数
        if (Integer.valueOf(xs) == 0) {
            df.applyPattern("0");
        } else {
            df.applyPattern("0."+String.format("%0"+ xs +"d%n", 0));
        }

        return df.format(Double.valueOf(value.toString())).trim();
    }

    @Override
    public String commitCheck(String id) {
        // 查找该审核过程是否存在
        SalaryAssignation assignation = get(SalaryAssignation.class,
                Restrictions.eq("id", id),
                Restrictions.eq("isDelete", 0));
        if (assignation == null) {
            return "该核算过程不存在，已经被删除";
        }

        // 是否已经提交审核
        if (assignation.getIsSp() == 1) {
            return "该核算过程已经提交";
        }

        // 是否已经通过
        if (assignation.getIsSp() == 3) {
            return "该核算过程已经审核通过";
        }
        assignation.setIsSp(1);
        update(assignation);

        return "success";
    }

    @Override
    public String batchCommitCheck(String ids, int isIgnore) {
        String[] idsArray = ids.split(",");
        List<SalaryAssignation> list = new ArrayList<SalaryAssignation>();
        List<AssignationRecord> listRecords = new ArrayList<AssignationRecord>();
        for (int i = 0, l = idsArray.length; i < l; i++) {
            // 查找该审核过程是否存在
            SalaryAssignation assignation = get(SalaryAssignation.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (assignation == null) {
                return "第"+(i+1)+"个核算过程不存在，已经被删除";
            }

            // 是否已经提交审核
            if (assignation.getIsSp() == 1) {
                return "第"+(i+1)+"个核算过程已经提交";
            }

            // 是否已经通过
            if (assignation.getIsSp() == 3) {
                return "第"+(i+1)+"个核算过程已经审核通过";
            }
            assignation.setIsSp(1);
            list.add(assignation);

            // 存在审批记录，作废
            List<AssignationRecord> records = getList(AssignationRecord.class,
                    Restrictions.eq("salaryAssignationId", assignation.getId()),
                    Restrictions.eq("isGiveup", 0),
                    Restrictions.eq("isDelete", 0));
            for (AssignationRecord assignationRecord : records) {
                assignationRecord.setIsGiveup(1);
                listRecords.add(assignationRecord);
            }

            // 判断薪酬期间是否存在不通过的二次分配
            if (isIgnore == 1) {
                List<SalaryAgain> salaryAgains = getList(SalaryAgain.class,
                        Restrictions.eq("companyId", assignation.getCompanyId()),
                        Restrictions.eq("fpDate", assignation.getSalaryPeriod()),
                        Restrictions.eq("reportStatus", 0),
                        Restrictions.eq("isDelete", 0));
                if (salaryAgains.size() > 0) {
                    return "-1";
                }
            }
        }

        if (list.size() > 0) {
            saveBatch(list);
            assignationRecordService.saveBatch(listRecords);
        } else {
            return "该核算过程已经通过";
        }

        return "success";
    }

    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public void export(String id, String searchData) {
        // 查找该审核过程是否存在
        SalaryAssignation assignation = get(SalaryAssignation.class,
                Restrictions.eq("id", id),
                Restrictions.eq("isDelete", 0));
        if (assignation == null) {
            return;
        }
        String sql = salaryAssignationDao.getAssignationForStaffDataSql(id, "", searchData);
        List<?> list = findBySql(sql);

        ArrayList<ArrayList> tableData = new ArrayList<ArrayList>();
        for (int i = 0; i < list.size(); i++) {
            ArrayList rowList=new ArrayList();
            Object[] obj = (Object[]) list.get(i);
            rowList.add(i+1);//序号
            rowList.add(obj[2]);// 工号
            rowList.add(obj[3]);// 姓名
            String[] charge = obj[6].toString().split(",");
            String[] addOrLess = obj[10].toString().split(",");
            for (int j = 0, ll = charge.length; j < ll; j++) {
                if (Integer.valueOf(addOrLess[j]) == 2) {
                    Double d = Double.valueOf(charge[j]);
                    rowList.add(d==0?0:"-"+charge[j]);// 薪资项目对应的值
                } else rowList.add(charge[j]);// 薪资项目对应的值
            }
            tableData.add(rowList);
        }

        // 汇总数据
        List<Map<String, Object>> totalList = salaryAssignationDao.getTotalData(id);

        //表格标题
        String[] tableCaption ={"序号","工号","姓名"};
        if (list.size() > 0) {
            // 取出薪资项目
            Object[] obj = (Object[]) list.get(0);
            String[] items = obj[5].toString().split(",");
            int len1 = tableCaption.length;
            int len2 = items.length;

            // 扩容第一个数组
            tableCaption = Arrays.copyOf(tableCaption, len1 + len2);
            System.arraycopy(items, 0, tableCaption, len1, len2);

            // 薪资ID,增加合计一行
            String[] itemsID = obj[4].toString().split(",");
            ArrayList rowList=new ArrayList();
            rowList.add("合计");
            rowList.add("");
            rowList.add("");
            for (String item : itemsID) {
                Boolean isExist = false;
                for (Map<String, Object> map : totalList) {
                    if (map.get("IBFID").equals(item)) {
                        rowList.add(map.get("CHARGE"));
                        isExist = true;
                        break;
                    }
                }
                if (!isExist) {
                    rowList.add("");
                }
            }
            tableData.add(rowList);
        }

        //表格脚部分
        String dcr=ToolUtil.userName();
        Date dcrq=new Date();
        ArrayList footData=new ArrayList();
        footData.add("导出人： "+ ExcelUtil.toString(dcr));
        footData.add("导出日期： "+ ExcelUtil.toString(dcrq));
        ExcelUtil.export(assignation.getName() +"导出薪酬数据", null, tableCaption, tableData, footData);
    }

    @Override
    public Map<String, Object> getNeedCheckStaffData(String id, Pager pager) {
        return salaryAssignationDao.getNeedCheckStaffData(id, pager);
    }

    @Override
    public String updateReleaseData(String ids) {
        String[] idsArray = ids.split(",");
        List<SalaryAssignation> assignations = new ArrayList<SalaryAssignation>();
        for (int i = 0, l = idsArray.length; i < l; i++) {
            // 查找该审核过程是否存在
            SalaryAssignation assignation = get(SalaryAssignation.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (assignation == null) {
                return "该核算过程不存在，已经被删除";
            }

            // 已经发放
            if (assignation.getIsFafang() == 1) {
                return assignation.getName() + "核算过程已发放";
            }

            // 已经发布
            if (assignation.getIsFafang() == 3) {
                return assignation.getName() + "核算过程已发布";
            }

            // 未提交
            if (assignation.getIsSp() == 0) {
                return assignation.getName() + "核算过程未提交，不能发放";
            }

            // 未通过
            if (assignation.getIsSp() == 2) {
                return assignation.getName() + "核算过程未通过，不能发放";
            }

            // 未通过
            if (assignation.getIsSp() != 3) {
                return assignation.getName() + "核算过程未通过，不能发放";
            }

            assignation.setIsFafang(1);
            assignation.setFafangAccount(LingUtil.userinfo().getId());
            assignation.setFafangDate(new Date());
            assignations.add(assignation);
        }

        // 更新状态
        saveBatch(assignations);

        return "success";
    }

    @Override
    public String updateNoReleaseData(String ids) {
        String[] idsArray = ids.split(",");
        List<SalaryAssignation> assignations = new ArrayList<SalaryAssignation>();
        for (int i = 0, l = idsArray.length; i < l; i++) {
            // 查找该审核过程是否存在
            SalaryAssignation assignation = get(SalaryAssignation.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (assignation == null) {
                return "该核算过程不存在，已经被删除";
            }

            // 未发放
            if (assignation.getIsFafang() == 0) {
                return assignation.getName() + "核算过程未发放";
            }

            // 已发布
            if (assignation.getIsFafang() == 2) {
                return assignation.getName() + "核算过程已发布";
            }

            assignation.setIsFafang(0);
            assignation.setFafangAccount(LingUtil.userinfo().getId());
            assignation.setFafangDate(new Date());
            assignations.add(assignation);
        }

        // 更新状态
        if (assignations.size() > 0) saveBatch(assignations);
        else return "没有核算过程可以发放";

        return "success";
    }

    @Override
    public String isCheckAUth(String ids, String userName) {
        return salaryAssignationDao.isCheckAUth(ids, userName);
    }

    @Override
    public String updateCheckPassed(String ids, String userName, String formdata) {
        String[] idsArray = ids.split(",");
        Map<String, String> map = JsonUtil.parseProperties(formdata);
        List<SalaryAssignation> assignations = new ArrayList<SalaryAssignation>();
        List<AssignationRecord> records = new ArrayList<AssignationRecord>();
        int isSp = Integer.valueOf(map.get("isSp")) == 0 ? 2: 3;
        int sp = Integer.valueOf(map.get("isSp"));
        for (int i = 0; i < idsArray.length; i++) {
            SalaryAssignation assignation = get(SalaryAssignation.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (assignation == null) {
                return "选择的第"+(i+1)+"个分配过程不存在，已经被删除";
            }

            // 查找当前审批者是否已经审批了相同结果
            List<AssignationRecord> asRecords = getOrderList(AssignationRecord.class, Order.asc("checkDate"),
                    Restrictions.eq("salaryAssignationId", idsArray[i]),
                    Restrictions.eq("assignationAccount", userName),
                    Restrictions.eq("isGiveup", 0),
                    Restrictions.eq("isDelete", 0));
            if (asRecords.size() > 0 && asRecords.get(asRecords.size() - 1).getIsSp() == sp) {
                continue;
            }

            // 是否启用审批
            WorkFlowPrent flowPrent = get(WorkFlowPrent.class,
                    Restrictions.eq("id", "402881945bec28ab015bec383aee0011"));
            if (flowPrent == null) {
                return "不存在审批流程";
            } else if (flowPrent.getState() == 0) {
                return "审批流程没有启用";
            }

            // 是否是最后一个审批者
            List<WorkFlowChild> childs = getOrderList(WorkFlowChild.class, Order.asc("sort"),
                    Restrictions.eq("pid", "402881945bec28ab015bec383aee0011"));

            // 是最后一个审批者
            if (sp == 0 || childs.get(childs.size()-1).getAppid().equals(userName)) {
                assignation.setIsSp(isSp);
                assignations.add(assignation);
            }

            // 审批记录
            AssignationRecord record = new AssignationRecord();
            record.setCheckDate(new Date());
            record.setIsSp(sp);
            record.setSalaryAssignationId(idsArray[i]);
            record.setAssignationAccount(userName);
            record.setNote(map.get("note"));
            record.setIsGiveup(0);
            record.setIsDelete(0);
            records.add(record);
        }

        // 更新分配过程
        if (assignations.size() > 0) saveBatch(assignations);
        if (records.size() > 0) assignationRecordService.saveBatch(records);

        return "success";
    }

    @Override
    public String createBankFile(String ids) {
        String[] idsArray = ids.split(",");
        for (int i = 0; i < idsArray.length; i++) {
            SalaryAssignation assignation = get(SalaryAssignation.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (assignation == null) {
                return "选择的第"+(i+1)+"个分配过程不存在，已经被删除";
            }
            if (assignation.getIsFafang() == 0) {
                return "选择的第"+(i+1)+"个分配过程没有发放不可以生成报盘文件";
            }
        }

        return "success";
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String updateSendSalaryRecord(String ids) throws Exception {
        String[] idsArray = ids.split(",");

        // 发布过的删除
        deleteByCriteria(SalaryWageMain.class, Restrictions.in("salaryAssignationId", idsArray));
        List<SalaryAssignation> assignations = new ArrayList<SalaryAssignation>();
        for (int i = 0, l = idsArray.length; i < l; i++) {
            // 查找该审核过程是否存在
            SalaryAssignation assignation = get(SalaryAssignation.class,
                    Restrictions.eq("id", idsArray[i]),
                    Restrictions.eq("isDelete", 0));
            if (assignation == null) {
                return "该核算过程不存在，已经被删除";
            }

            // 未发放
            if (assignation.getIsFafang() == 0) {
                return assignation.getName() + "核算过程未发放";
            }

            // 已发布
            if (assignation.getIsFafang() == 3) {
                continue;
            }

            assignation.setIsFafang(3);
            assignation.setFafangAccount(LingUtil.userinfo().getId());
            assignation.setFafangDate(new Date());
            assignations.add(assignation);
        }

        // 更新状态
        if (assignations.size() > 0) saveBatch(assignations);

        // 工资条发放
        String recordsSql = salaryAssignationDao.getNeedSendSalaryRecordsSql(ids);
        List<?> needSendSalaryRecords = findBySql(recordsSql);

        // 工资条关联主表ID
        String mainResult = "";
        List<SalaryWageSecond> salaryWageSeconds = new ArrayList<SalaryWageSecond>();
        for (int i = 0, l = needSendSalaryRecords.size(); i < l; i++) {
            Object[] obj = (Object[]) needSendSalaryRecords.get(i);
            Object assignationId = obj[0];
            Object staffId = obj[1];
            if (i > 0) {
                Object[] lastObj = (Object[]) needSendSalaryRecords.get(i-1);
                Object lastAssignationId = lastObj[0];
                Object lastStaffId = lastObj[1];

                // 同一个分配过程并且同一个员工之外的情况一律增加一条信息
                if (!(lastAssignationId.equals(assignationId) && lastStaffId.equals(staffId))) {
                    SalaryWageMain wageMain = new SalaryWageMain();
                    wageMain.setSalaryAssignationId(lastAssignationId.toString());
                    wageMain.setStaffId(lastStaffId.toString());
                    wageMain.setStaffName(lastObj[3].toString());
                    wageMain.setCompanyId(lastObj[7].toString());
                    wageMain.setCompanyName(lastObj[9].toString());
                    wageMain.setDeptId(lastObj[8].toString());
                    wageMain.setCompanyName(lastObj[10].toString());
                    wageMain.setIsRelease(1);
                    wageMain.setIsDelete(0);
                    mainResult = salaryWageMainService.save(wageMain);
                    if (StringUtils.isBlank(mainResult)) {
                        throw new Exception("发生异常");
                    }
                }
            } else {
                SalaryWageMain wageMain = new SalaryWageMain();
                wageMain.setSalaryAssignationId(assignationId.toString());
                wageMain.setStaffId(staffId.toString());
                wageMain.setStaffName(obj[3].toString());
                wageMain.setCompanyId(obj[7].toString());
                wageMain.setCompanyName(obj[9].toString());
                wageMain.setDeptId(obj[8].toString());
                wageMain.setCompanyName(obj[10].toString());
                wageMain.setIsRelease(1);
                wageMain.setIsDelete(0);
                mainResult = salaryWageMainService.save(wageMain);
                if (StringUtils.isBlank(mainResult)) {
                    throw new Exception("发生异常");
                }
            }
            SalaryWageSecond wageSecond = new SalaryWageSecond();
            wageSecond.setSalaryWageMainId(mainResult);
            wageSecond.setIbfId(obj[4].toString());
            wageSecond.setItemsName(obj[5].toString());
            wageSecond.setSalaryValue(obj[6].toString());
            wageSecond.setIsDelete(0);
            salaryWageSeconds.add(wageSecond);
        }
        if (salaryWageSeconds.size() > 0) salaryWageSecondService.saveBatch(salaryWageSeconds);

        return "success";
    }

    @Override
    @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED)
    public String updateNoSendSalaryRecord(String ids) throws Exception {
        String[] idArray = ids.split(",");
        for (int i = 0, l = idArray.length; i < l; i++) {
            SalaryAssignation assignationNew  = get(SalaryAssignation.class, Restrictions.eq("id", idArray[i]), Restrictions.eq("isDelete", 0));
            if (assignationNew == null) {
                throw new Exception("选择的第"+(i+1)+"个分配过程不存在，已经被删除");
            }
            if (assignationNew.getIsFafang() != 3) {
                throw new Exception(assignationNew.getName()+"分配过程没有发布");
            }
            assignationNew.setIsFafang(2);
            update(assignationNew);
            SalaryWageMain salaryWageMain  = get(SalaryWageMain.class,
                    Restrictions.eq("salaryAssignationId", assignationNew.getId()), Restrictions.eq("isDelete", 0));
            if (salaryWageMain != null) {
                if (salaryWageMain.getIsRelease() == 0) {
                    salaryWageMain.setIsRelease(1);
                    salaryWageMainService.update(salaryWageMain);
                }
            } else {
                throw new Exception("发生异常");
            }
        }

        return "success";
    }

}
