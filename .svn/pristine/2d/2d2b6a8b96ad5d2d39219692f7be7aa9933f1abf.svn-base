package com.lingnet.hcm.action.personnel;

import javax.annotation.Resource;

import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Controller;

import com.lingnet.common.action.BaseAction;
import com.lingnet.common.action.BaseAction.Status;
import com.lingnet.hcm.entity.contract.EmployAgreement;
import com.lingnet.hcm.entity.person.BasicInformation;
import com.lingnet.hcm.entity.person.Change;
import com.lingnet.hcm.entity.person.SkilledEmp;
import com.lingnet.hcm.service.personnel.PersonnelService;
import com.lingnet.qxgl.entity.Branch;
import com.lingnet.util.JsonUtil;

/**
 * 员工公司内部流动，以及上岗，待岗长病假，内退等岗位操作action
 * @ClassName: BranchAction 
 * @Description: TODO 
 * @author lsp
 * @date 2016-8-3 下午1:50:42 
 *
 */
@Controller
public class ChangeAction extends BaseAction{
    
	private static final long serialVersionUID = 5453221435881869026L;

	@Resource(name="personnelService")
    private PersonnelService personnelService;
	
    private BasicInformation information;
    private Branch branch;
    private Change change;
    
    private String formdata;//添加数据的JSON串
    private String flag;//标志位
    private String departId;//部门ID
    private String departName;//部门
    private String filmId;//单位ID
    private String filmName;
    private String jobNumber;//
    private EmployAgreement employagre;//协议实体类
    private String username;

    //所有人员list页面
    public String list(){
        return "list";
    }
    //内部调动页面
    public String add(){
    	
		information=this.getBeanByCriteria(BasicInformation.class, Restrictions.eq("jobNumber", jobNumber));
        return "add";
    }
    //内部调动保存方法
    public String saveOrUpdate(){
        if(formdata==null||formdata==""){
            return ajax(Status.success,"数据错误请联系管理员!");
        }else{
        	change=JsonUtil.toObject(formdata, Change.class);
        } 
        try { 
        	BasicInformation info=this.getBeanByCriteria(BasicInformation.class, Restrictions.eq("jobNumber", jobNumber));
            if(change.getChangeType()==7){//调动部门
            	
            	info.setFilmId(change.getFilm2());
            	info.setFilmName(change.getFilmName2());
            	info.setDepartId(change.getDep());
            	info.setDepartName(change.getDepName2());
            	info.setDepbeginDate(change.getChangedate());
            	info.setPostbeginDate(change.getChangedate());
            	info.setPostId(change.getSpPost2());
            	info.setPost(change.getSpPostName2());
            	info.setSpecificPostId(change.getSpanPost2());
            	info.setSpecificPost(change.getSpanPostName2());
            	info.setCheckUnitId(change.getDep());
            
            }else if(change.getChangeType()==8){//岗位调动
            	
            	info.setFilmId(change.getFilm2());
            	info.setFilmName(change.getFilmName2());
            	info.setDepartId(change.getDep());
            	info.setDepartName(change.getDepName2());
            	info.setPostbeginDate(change.getChangedate());
            	info.setPostId(change.getSpPost2());
            	info.setPost(change.getSpPostName2());
            	info.setSpecificPostId(change.getSpanPost2());
            	info.setSpecificPost(change.getSpanPostName2());
            	info.setCheckUnitId(change.getDep());
            	
            }else if(change.getChangeType()==9){//外派
            	info.setIsEvection(1);
            	info.setEvectionType(0);
            	
            }else if(change.getChangeType()==10){//借调
            	info.setIsEvection(1);
            	info.setEvectionType(1);
            }
            this.update(info);
            this.save(change); 
            
        } catch (Exception e) {
            return ajax(Status.success,"保存/修改失败");
        }
        return ajax(Status.success,"success");
    }
    //离岗页面
    public String ligang(){
    	information=this.getBeanByCriteria(BasicInformation.class, Restrictions.eq("jobNumber", jobNumber));
        return "ligang";
    }
    //离岗信息保存
    public String saveOrUpdateLigang(){
        if(formdata==null||"".equals(formdata.trim())){
            return ajax(Status.success,"数据错误，请查证后重新操作");
        } 
        employagre=JsonUtil.toObject(formdata,EmployAgreement.class);
        change=JsonUtil.toObject(formdata, Change.class);
        try {
            username=personnelService.get(Restrictions.eq("jobNumber", jobNumber)).getName();
        
	        employagre.setUsername(username);
	        BasicInformation info=this.getBeanByCriteria(BasicInformation.class, Restrictions.eq("jobNumber", jobNumber));
	        if(employagre==null){
	            return ajax(Status.success,"数据错误，请查证后重新操作");
	        }else{
	        	
	        	info.setDepartId(null);
	        	info.setDepartName(null);
	        	info.setDepbeginDate(null);
	        	info.setPost(null);
	        	info.setPostId(null);
	        	info.setSpecificPost(null);
	        	info.setSpecificPostId(null);
	        	info.setPostbeginDate(null);
	        	info.setPostNature(null);
	        	info.setPostType(null);
	        	
	        	info.setOnPost(change.getChangeType());//改变在岗状态
	        	this.update(info);
	            this.save(employagre);
	        }
	        return ajax(Status.success,"保存/修改成功");
        } catch (Exception e) {
        	return ajax(Status.success,"保存失败");
        }
        
    }
    public String findFilmName(){
    	branch=this.getBeanById(Branch.class, filmId);
    	if(branch!=null){
    		filmName=branch.getFzx();
    	}
    	return ajax(Status.success, filmName);
    }
    //返聘页面
    public String fanpin(){
    	information=this.getBeanByCriteria(BasicInformation.class, Restrictions.eq("jobNumber", jobNumber));
        return "fanpin";
    }
    
//////////////////////////////////////////////////////////////////////////

    public String getFormdata() {
        return formdata;
    }
    public void setFormdata(String formdata) {
        this.formdata = formdata;
    }

	public String getFlag() {
		return flag;
	}
	public void setFlag(String flag) {
		this.flag = flag;
	}
	public BasicInformation getInformation() {
		return information;
	}
	public void setInformation(BasicInformation information) {
		this.information = information;
	}
	public String getDepartId() {
		return departId;
	}
	public void setDepartId(String departId) {
		this.departId = departId;
	}
	public String getJobNumber() {
		return jobNumber;
	}
	public void setJobNumber(String jobNumber) {
		this.jobNumber = jobNumber;
	}
	public String getDepartName() {
		return departName;
	}
	public String getFilmId() {
		return filmId;
	}
	public void setFilmId(String filmId) {
		this.filmId = filmId;
	}
	public void setDepartName(String departName) {
		this.departName = departName;
	}
	public String getFilmName() {
		return filmName;
	}
	public void setFilmName(String filmName) {
		this.filmName = filmName;
	}

	public Change getChange() {
		return change;
	}

	public void setChange(Change change) {
		this.change = change;
	}
	public Branch getBranch() {
		return branch;
	}
	public void setBranch(Branch branch) {
		this.branch = branch;
	}
	public EmployAgreement getEmployagre() {
		return employagre;
	}
	public void setEmployagre(EmployAgreement employagre) {
		this.employagre = employagre;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}


  
}
