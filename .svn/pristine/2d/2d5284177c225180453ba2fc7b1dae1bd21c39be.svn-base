package com.lingnet.hcm.dao.impl.personnel;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.lingnet.common.dao.impl.BaseDaoImpl;
import com.lingnet.common.dao.impl.BaseDaoImplInit;
import com.lingnet.hcm.dao.personnel.PersonnelDao;
import com.lingnet.hcm.entity.person.BasicInformation;
import com.lingnet.util.JsonUtil;
import com.lingnet.util.Pager;
/**
 * 
 * @ClassName: PersonnelDaoImpl 
 * @Description:  
 * @author zrl
 * @date 2017年3月20日 下午12:08:54 
 *
 */
@Repository("personnelDao")
public class PersonnelDaoImpl extends BaseDaoImplInit<BasicInformation, String> 
	implements PersonnelDao{
	
	@Override
	public BasicInformation getByJobNumber(String jobNumber) {
		BasicInformation info = (BasicInformation) this.getSession().createCriteria(BasicInformation.class)
				.add(Restrictions.eq("jobNumber", jobNumber)).uniqueResult();
		return info;
	}

	@Override
	public List<Object> getAllJobNumbers() {
		String sql = "select JOB_NUMBER from JC_BASIC_INFORMATION where IS_DELETE = '0'";
		return this.getSession().createSQLQuery(sql).list();
	}

	@Override
	public List<Object> getAllCheckNumbers() {
		String sql = "select CHECK_NO from JC_BASIC_INFORMATION where IS_DELETE = '0'";
		return this.getSession().createSQLQuery(sql).list();
	}

	@Override
	public void updateBatchClass(String empIds, String depIds, String classNo) {
		String sql = "update JC_BASIC_INFORMATION set CLASS_NO = '"+classNo+"' where IS_DELETE = 0 ";
		if (!"".equals(empIds)){
			sql += "and ID IN("+empIds+") ";
		}
		if (!"".equals(depIds)){
			sql += "and DEPART_ID IN("+depIds+") ";
		}
		this.getSession().createSQLQuery(sql).executeUpdate();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Object[]> getCheckInfosByDepIds(String depIds) {
		String sql = "select jbi.JOB_NUMBER, jbi.CLASS_NO, ci.ID "
			+"from JC_BASIC_INFORMATION jbi "
			+"left join CK_CLASS cc on jbi.CLASS_NO = cc.CLASS_NO "
			+"left join CK_INSTITUTION ci ON ci.ID = cc.INSTITUTE_ID "
			+"where jbi.IS_DELETE = 0 and jbi.CLASS_NO is not null ";
		if (!"".equals(depIds)){
			sql += "and jbi.DEPART_ID IN("+depIds+") ";
		}
		return this.getSession().createSQLQuery(sql).list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public String getEmpIdsByDepIds(String depIds) {
		String empIds = "";
		String sql = "select ID from JC_BASIC_INFORMATION where IS_DELETE = 0 and DEPART_ID IN("+depIds+")";
		List<Object> list = this.getSession().createSQLQuery(sql).list();
		if (list.size() > 0){
			for (Object obj:list){
				empIds += (obj + ",");
			}
		}
		if (!"".equals(empIds)){
			empIds = empIds.substring(0, empIds.length()-1);
		}
		return empIds;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, String>> getDataByEmpIds(Pager pager, List<String> empIdArrs) {
		List<Map<String, String>> list = new ArrayList<Map<String, String>>();
		String empIds = "";
		if (empIdArrs.size() > 0){
			for (String empId:empIdArrs){
				empIds += ("'" + empId + "', ");
			}
		}
		if (!"".equals(empIds)){
			String sql = "select jbi.ID, cc.class_name, jbi.name, jbi.job_number, jbi.post "
				+"from jc_basic_information jbi "
				+"left join CK_CLASS cc on jbi.class_no = cc.class_no "
				+"where jbi.id in("+empIds.substring(0, empIds.length()-2)+")";
			List<Object[]> objList = this.getSession().createSQLQuery(sql).list();
			if (objList.size() > 0){
				for (Object[] obj:objList){
					Map<String, String> map = new HashMap<String, String>();
					map.put("empId", obj[0]+"");
					map.put("className", obj[1]+"");
					map.put("empName", obj[2]+"");
					map.put("jobNumber", obj[3]+"");
					map.put("post", obj[4]+"");
					list.add(map);
				}
			}
		}
		return list;
	}

	@SuppressWarnings("unchecked")
	@Override
	public String getJobNumbersByDepIds(String depIds) {
		String sql = "select JOB_NUMBER from JC_BASIC_INFORMATION where CHECK_UNIT_ID in("+depIds+")";
		List<Object> objs = this.getSession().createSQLQuery(sql).list();
		String jobNumbers = "";
		if (objs != null){
			for (Object obj:objs){
				jobNumbers += ("'" +obj+ "', ");
			}
		}
		if (!"".equals(jobNumbers)){
			jobNumbers = jobNumbers.substring(0, jobNumbers.length()-2);
		}
		return jobNumbers;
	}

	@Override
	public String getCheckUnitIdByJobNumber(String jobNumber) {
		String sql = "select CHECK_UNIT_ID from JC_BASIC_INFORMATION where JOB_NUMBER ='"+jobNumber+"'";
		Object obj = this.getSession().createSQLQuery(sql).uniqueResult();
		return (obj==null?"":obj+"");
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, String>> getAnnualLeaveData(Pager pager,
			String searchData, String depIds) {
		List<Map<String, String>> listDate = new ArrayList<Map<String, String>>();
		String sql = "select JOB_NUMBER, NAME, CLASS_NAME, to_char(SET_WORK_DATE, 'yyyy-MM-dd'), "
				+ "to_char(IN_PORT_TIME, 'yyyy-MM-dd') "
				+ "from JC_BASIC_INFORMATION jbi "
				+ "left join jc_pt_job jpj on jpj.PERSON_ID = jbi.ID "
				+ "left join CK_CLASS cc on jbi.CLASS_NO = cc.CLASS_NO "
				+ "where jbi.IS_DELETE = 0 and jpj.IS_HOST_POST = '1' ";
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				sql += "and jbi.CHECK_UNIT_ID in(";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						sql += ("'" + depIdArrs[i] + "', ");
					}
				}
				sql = sql.substring(0, sql.length()-2);
				sql += ") ";
			} else {
				sql += "and jbi.CHECK_UNIT_ID IN("+ depIds +") ";
			}
		} else {
			sql += "and jbi.CHECK_UNIT_ID IN("+ depIds +") ";
		}
		Pager pageInfo = this.findPagerBySql(pager, sql);
		List<Object[]> list = (List<Object[]>) pageInfo.getResult();
		if (list.size() > 0){
			for (Object[] obj:list){
				Map<String, String> map = new HashMap<String, String>();
				map.put("jobNumber", obj[0]+"");
				map.put("name", obj[1]+"");
				map.put("className", obj[2]+"");
				map.put("workDate", obj[3]+"");//起始工作日期
				map.put("portDate", obj[4]+"");//入港日期
				map.put("legalDay", "");//全部
				map.put("shouldTake", "");//应休
				map.put("month1", "");
				map.put("month2", "");
				map.put("month3", "");
				map.put("month4", "");
				map.put("month5", "");
				map.put("month6", "");
				map.put("month7", "");
				map.put("month8", "");
				map.put("month9", "");
				map.put("month10", "");
				map.put("month11", "");
				map.put("month12", "");
				map.put("haveTake", "");//已休
				map.put("surplus", "");//剩余
				listDate.add(map);
			}
		}
		return listDate;
	}
	@Override
	public String getCheckUnitIdById(String id) {
		String sql = "select jbi.CHECK_UNIT_ID from QX_USERS qu "
				+ "left join JC_BASIC_INFORMATION jbi on qu.USERNAME = jbi.JOB_NUMBER "
				+ "where qu.ID ='"+id+"'";
		Object obj = this.getSession().createSQLQuery(sql).uniqueResult();
		return (obj==null?"":obj+"");
	}
	//**************************************************************************//
	/**
	 * 查询员工总页面
	 */
	@Override
	public HashMap<String, Object> getPersonByDepId(Pager pager,String searchData,String depIds) {
		
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append("  WHERE BAS.IS_DELETE = 0 AND BAS.ON_JOB NOT IN(0,3,4) ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER LIKE'"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			//map.put("post", obj[7]);
			map.put("jobLevel", obj[7]);
			/*map.put("jobLevel", obj[8]);*/
			map.put("empType", obj[8]);
			
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
		
	}
	/**
	 * getZsgPerson
	 * 试岗期页面
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getSgqPerson(Pager pager,String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT,  ")
		.append("  TO_CHAR(BAS.ZZ_DATE,'YYYY-MM-DD'),TO_CHAR(BAS.JSSY_DATE,'YYYY-MM-DD')  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.ON_JOB = 1 AND BAS.EMP_TYPE = 0 AND BAS.ON_POST = 0 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			map.put("zzDate", obj[17]);
			map.put("jssyDate", obj[18]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
		
	}
	/**
	 * getZsgPerson
	 * 正式工页面
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getZsgPerson(Pager pager,String searchData,String depIds) {
		//普通员工里面的正式工
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append("  where BAS.ON_JOB = 2 AND BAS.EMP_TYPE = 0 AND BAS.ON_POST = 0")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
		
	}
	/**
	 * getZsgPerson
	 * 实习生list页面
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getSxsPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT,BAS.IS_PRACTICE,BAS.PRACTICE_NUM  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.IS_PRACTICE IN (0, 1 ,2) ")//0为结束实习的，1为正在实习的，2已经转正
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("practiceNum") != null && !"".equals(dataMap.get("practiceNum"))){
				sql.append(" and BAS.PRACTICE_NUM like '%"+dataMap.get("practiceNum")+"%'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by BAS.CREATEDATE DESC ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			map.put("isPractice", obj[17]);
			map.put("practiceNum", obj[18]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	/**
	 * getZsgPerson
	 * 劳务外包list页面
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getLwwbPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.EMP_TYPE = 1 AND BAS.ON_POST = 0 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	/**
	 * getZsgPerson
	 * 业务外包list页面
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getYwwbPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.EMP_TYPE = 2 AND BAS.ON_POST = 0 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	
	/**
	 * getZsgPerson
	 * 退休list页面
	 * 劳务外包人员，业务外包人员，正式工的退休
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getTxPerson(Pager pager, String searchData) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT,  ")
		.append("  JER.LEAVE_TYPE,TO_CHAR(JER.LEAVE_DATE,'YYYY-MM-DD'),JER.PRE_FIRM,JER.PRE_DEP,  ")
		.append("  BR.FZX,QD.NAME DEPNAME,JER.APPROVE_FIRM,JER.REMARK  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append("  LEFT JOIN JC_EMP_RETIRE JER ON BAS.ID=JER.PERSON_ID  ")
		.append("  LEFT JOIN BRANCH BR ON BR.ID = JER.LATER_FIRM  ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = JER.LATER_DEP  ")
		.append("  where BAS.IS_DELETE = 0 AND BAS.ON_JOB = 4 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		}
		sql.append(" order by JER.LEAVE_DATE DESC ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			map.put("leaveType", obj[17]);
			map.put("leaveDate", obj[18]);
			map.put("preFirm", obj[19]);
			map.put("preDep", obj[20]);
			map.put("laterFirm", obj[21]);
			map.put("laterDep", obj[22]);
			map.put("approveFirm", obj[23]);
			map.put("remark", obj[24]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	/**
	 * getZsgPerson
	 * 离职list页面
	 * 劳务外包人员，业务外包人员，正式工的离职
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getLzPerson(Pager pager, String searchData) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID PERSONID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT,  ")
		
		.append("  JED.LEAVE_TYPE,TO_CHAR(JED.LEAVE_DATE,'YYYY-MM-DD'),JED.DIRECTION,  ")
		.append("  JED.FILE_NUMBER,JED.APPROVER,JED.ISHITLIST,JED.ISCOMPENSATE,JED.COST,  ")
		.append("  JED.ISDTZJ,JED.REMARK  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append("  LEFT JOIN JC_EMP_DIMISSION JED ON JED.PERSON_ID = BAS.ID  ")
		.append("  where BAS.IS_DELETE = 0 AND BAS.ON_JOB = 3 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		}
		sql.append(" order by JED.LEAVE_DATE DESC ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			map.put("leaveType", obj[17]);
			map.put("leaveDate", obj[18]);
			map.put("direction", obj[19]);
			map.put("fileNumber", obj[20]);
			map.put("approver", obj[21]);
			map.put("ishitlist", obj[22]);
			map.put("iscompensate", obj[23]);
			map.put("cost", obj[24]);
			map.put("isdtzj", obj[25]);
			map.put("remark", obj[26]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	/**
	 * getZsgPerson
	 * 返聘list页面
	 * 劳务外包人员，业务外包人员，正式工的返聘
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getFpPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.ON_JOB = 5 AND BAS.ON_POST = 0 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by BAS.CREATEDATE DESC ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	/**
	 * getZsgPerson
	 * 返聘list页面
	 * 退伍军人
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getFyjrPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.IS_SOLDIER = 1 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}

	/**
	 * getZsgPerson
	 * 非在岗人员
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getFzgPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.ON_POST <> 0 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by BAS.CREATEDATE DESC ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}

	/**
	 * getZsgPerson
	 * 技术工人
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getJsgrPerson(Pager pager, String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where BAS.IS_DELETE = 0 AND BAS.ON_JOB IN(1,2,5) AND BAS.IS_SKILLED=1")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}

	/**
	 * getZsgPerson
	 * 专业技术人员
	 * zrl
	 */
	@Override
	public HashMap<String, Object> getZyjsryPerson(Pager pager,
			String searchData,String depIds) {
		StringBuilder sql=new StringBuilder()
		.append("  SELECT BAS.ID, BAS.DEPART_ID, BAS.JOB_NUMBER, BAS.NAME,BAS.AGE,  ")
		.append("  BAS.SEX,BAS.IS_MARRIED,BAS.JOB_LEVEL,BAS.EMP_TYPE,  ")
		.append("  BAS.ON_JOB,BAS.ON_POST,PP.POSITION_NAME PPNAME,DP.POSITION_NAME DPNAME,  ")
		.append("  BAS.FILM_ID,BAS.FILM_NAME,BAS.DEPART_NAME,BAS.JOB_NUMBER_JT  ")
		.append("  FROM JC_BASIC_INFORMATION BAS ")
		.append("  LEFT JOIN QX_DEPARTMENT QD ON QD.ID = BAS.DEPART_ID  ")
		.append("  LEFT JOIN POST_POSITION PP ON PP.ID = BAS.POST_ID  ")
		.append("  LEFT JOIN DEPT_POSITION DP ON DP.ID = BAS.SPECIFIC_POST_ID  ")
		.append(" where IS_DELETE = 0 AND ON_JOB IN(1,2,5) AND IS_SPECIALTY=1 ")
		;
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				
				String  resql="";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						resql+="'" + depIdArrs[i] + "', ";
					}
				}
				resql = resql.substring(0, resql.length()-2);
				
				sql.append(" and BAS.DEPART_ID in("+resql+")");
				
			} else {
				sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
			}
			if (dataMap.get("jobNumber") != null && !"".equals(dataMap.get("jobNumber"))){
				sql.append(" and BAS.JOB_NUMBER ='"+dataMap.get("jobNumber")+"'");
			}
			if (dataMap.get("name") != null && !"".equals(dataMap.get("name"))){
				sql.append(" and BAS.NAME like '%"+dataMap.get("name")+"%'");
			}
			
		} else {
			sql.append(" AND BAS.DEPART_ID IN("+ depIds+") ");
		}
		sql.append(" order by QD.DESCRIPTION,PP.POSITION_CODE ");
		
		pager=this.findPagerBySql(pager, sql.toString());
		List list = pager.getResult();
		
        List dataList = new ArrayList();
		
		for (int i=0; i < list.size(); i++){
			Object[] obj = (Object[]) list.get(i);
			Map<String, Object> map = new HashMap<String, Object>();
			
			map.put("id", obj[0]);
			map.put("depId", obj[1]);
			map.put("jobNumber", obj[2]);
			map.put("name", obj[3]);
			map.put("age", obj[4]);
			map.put("sex", obj[5]);
			map.put("isMarried", obj[6]);
			map.put("jobLevel", obj[7]);
			map.put("empType", obj[8]);
			map.put("onJob", obj[9]);
			map.put("onPost", obj[10]);
			map.put("post", obj[11]);
			map.put("specificPost", obj[12]);
			map.put("filmId", obj[13]);
			map.put("filmName", obj[14]);
			map.put("departName", obj[15]);
			map.put("jobNumberJt", obj[16]);
			dataList.add(map);
		}
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("data", dataList);
        map.put("total", pager.getTotalCount());
        
		return map;
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, String>> getAnnualDataList(String searchData, String depIds) {
		List<Map<String, String>> listDate = new ArrayList<Map<String, String>>();
		String sql = "select JOB_NUMBER, NAME, CLASS_NAME, to_char(SET_WORK_DATE, 'yyyy-MM-dd'), "
				+ "to_char(IN_PORT_TIME, 'yyyy-MM-dd') "
				+ "from JC_BASIC_INFORMATION jbi "
				+ "left join CK_CLASS cc on jbi.CLASS_NO = cc.CLASS_NO "
				+ "where jbi.IS_DELETE = 0 ";
		if (searchData != null){
			Map<String,String> dataMap = JsonUtil.parseProperties(searchData);
			if (dataMap.get("depId") != null && !"".equals(dataMap.get("depId"))){
				String[] depIdArrs = dataMap.get("depId").split(",");
				sql += "and jbi.CHECK_UNIT_ID in(";
				for (int i = 0; i < depIdArrs.length; i++){
					if (!"".equals(depIdArrs[i])){
						sql += ("'" + depIdArrs[i] + "', ");
					}
				}
				sql = sql.substring(0, sql.length()-2);
				sql += ") ";
			} else {
				sql += "and jbi.CHECK_UNIT_ID IN("+ depIds +") ";
			}
		} else {
			sql += "and jbi.CHECK_UNIT_ID IN("+ depIds +") ";
		}
		List<Object[]> list = this.getSession().createSQLQuery(sql).list();
		if (list.size() > 0){
			for (Object[] obj:list){
				Map<String, String> map = new HashMap<String, String>();
				map.put("jobNumber", obj[0]+"");
				map.put("name", obj[1]+"");
				map.put("className", obj[2]+"");
				map.put("workDate", obj[3]+"");//起始工作日期
				map.put("portDate", obj[4]+"");//入港日期
				map.put("legalDay", "");//全部
				map.put("shouldTake", "");//应休
				map.put("month1", "");
				map.put("month2", "");
				map.put("month3", "");
				map.put("month4", "");
				map.put("month5", "");
				map.put("month6", "");
				map.put("month7", "");
				map.put("month8", "");
				map.put("month9", "");
				map.put("month10", "");
				map.put("month11", "");
				map.put("month12", "");
				map.put("haveTake", "");//已休
				map.put("surplus", "");//剩余
				listDate.add(map);
			}
		}
		return listDate;
	}

}
